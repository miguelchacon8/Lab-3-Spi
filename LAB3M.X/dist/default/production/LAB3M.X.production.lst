

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Fri Feb 03 01:23:15 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	text20,local,class=CODE,merge=1,delta=2
    32                           	psect	text21,local,class=CODE,merge=1,delta=2
    33                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    34                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    35                           	dabs	1,0x7E,2
    36     0000                     
    37                           ; Version 2.40
    38                           ; Generated 17/11/2021 GMT
    39                           ; 
    40                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution. Publication is not required when
    54                           ;        this file is used in an embedded application.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC16F887 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72     0000                     	;# 
    73     0001                     	;# 
    74     0002                     	;# 
    75     0003                     	;# 
    76     0004                     	;# 
    77     0005                     	;# 
    78     0006                     	;# 
    79     0007                     	;# 
    80     0008                     	;# 
    81     0009                     	;# 
    82     000A                     	;# 
    83     000B                     	;# 
    84     000C                     	;# 
    85     000D                     	;# 
    86     000E                     	;# 
    87     000E                     	;# 
    88     000F                     	;# 
    89     0010                     	;# 
    90     0011                     	;# 
    91     0012                     	;# 
    92     0013                     	;# 
    93     0014                     	;# 
    94     0015                     	;# 
    95     0015                     	;# 
    96     0016                     	;# 
    97     0017                     	;# 
    98     0018                     	;# 
    99     0019                     	;# 
   100     001A                     	;# 
   101     001B                     	;# 
   102     001B                     	;# 
   103     001C                     	;# 
   104     001D                     	;# 
   105     001E                     	;# 
   106     001F                     	;# 
   107     0081                     	;# 
   108     0085                     	;# 
   109     0086                     	;# 
   110     0087                     	;# 
   111     0088                     	;# 
   112     0089                     	;# 
   113     008C                     	;# 
   114     008D                     	;# 
   115     008E                     	;# 
   116     008F                     	;# 
   117     0090                     	;# 
   118     0091                     	;# 
   119     0092                     	;# 
   120     0093                     	;# 
   121     0093                     	;# 
   122     0093                     	;# 
   123     0094                     	;# 
   124     0095                     	;# 
   125     0096                     	;# 
   126     0097                     	;# 
   127     0098                     	;# 
   128     0099                     	;# 
   129     009A                     	;# 
   130     009B                     	;# 
   131     009C                     	;# 
   132     009D                     	;# 
   133     009E                     	;# 
   134     009F                     	;# 
   135     0105                     	;# 
   136     0107                     	;# 
   137     0108                     	;# 
   138     0109                     	;# 
   139     010C                     	;# 
   140     010C                     	;# 
   141     010D                     	;# 
   142     010E                     	;# 
   143     010F                     	;# 
   144     0185                     	;# 
   145     0187                     	;# 
   146     0188                     	;# 
   147     0189                     	;# 
   148     018C                     	;# 
   149     018D                     	;# 
   150     0000                     	;# 
   151     0001                     	;# 
   152     0002                     	;# 
   153     0003                     	;# 
   154     0004                     	;# 
   155     0005                     	;# 
   156     0006                     	;# 
   157     0007                     	;# 
   158     0008                     	;# 
   159     0009                     	;# 
   160     000A                     	;# 
   161     000B                     	;# 
   162     000C                     	;# 
   163     000D                     	;# 
   164     000E                     	;# 
   165     000E                     	;# 
   166     000F                     	;# 
   167     0010                     	;# 
   168     0011                     	;# 
   169     0012                     	;# 
   170     0013                     	;# 
   171     0014                     	;# 
   172     0015                     	;# 
   173     0015                     	;# 
   174     0016                     	;# 
   175     0017                     	;# 
   176     0018                     	;# 
   177     0019                     	;# 
   178     001A                     	;# 
   179     001B                     	;# 
   180     001B                     	;# 
   181     001C                     	;# 
   182     001D                     	;# 
   183     001E                     	;# 
   184     001F                     	;# 
   185     0081                     	;# 
   186     0085                     	;# 
   187     0086                     	;# 
   188     0087                     	;# 
   189     0088                     	;# 
   190     0089                     	;# 
   191     008C                     	;# 
   192     008D                     	;# 
   193     008E                     	;# 
   194     008F                     	;# 
   195     0090                     	;# 
   196     0091                     	;# 
   197     0092                     	;# 
   198     0093                     	;# 
   199     0093                     	;# 
   200     0093                     	;# 
   201     0094                     	;# 
   202     0095                     	;# 
   203     0096                     	;# 
   204     0097                     	;# 
   205     0098                     	;# 
   206     0099                     	;# 
   207     009A                     	;# 
   208     009B                     	;# 
   209     009C                     	;# 
   210     009D                     	;# 
   211     009E                     	;# 
   212     009F                     	;# 
   213     0105                     	;# 
   214     0107                     	;# 
   215     0108                     	;# 
   216     0109                     	;# 
   217     010C                     	;# 
   218     010C                     	;# 
   219     010D                     	;# 
   220     010E                     	;# 
   221     010F                     	;# 
   222     0185                     	;# 
   223     0187                     	;# 
   224     0188                     	;# 
   225     0189                     	;# 
   226     018C                     	;# 
   227     018D                     	;# 
   228     0000                     	;# 
   229     0001                     	;# 
   230     0002                     	;# 
   231     0003                     	;# 
   232     0004                     	;# 
   233     0005                     	;# 
   234     0006                     	;# 
   235     0007                     	;# 
   236     0008                     	;# 
   237     0009                     	;# 
   238     000A                     	;# 
   239     000B                     	;# 
   240     000C                     	;# 
   241     000D                     	;# 
   242     000E                     	;# 
   243     000E                     	;# 
   244     000F                     	;# 
   245     0010                     	;# 
   246     0011                     	;# 
   247     0012                     	;# 
   248     0013                     	;# 
   249     0014                     	;# 
   250     0015                     	;# 
   251     0015                     	;# 
   252     0016                     	;# 
   253     0017                     	;# 
   254     0018                     	;# 
   255     0019                     	;# 
   256     001A                     	;# 
   257     001B                     	;# 
   258     001B                     	;# 
   259     001C                     	;# 
   260     001D                     	;# 
   261     001E                     	;# 
   262     001F                     	;# 
   263     0081                     	;# 
   264     0085                     	;# 
   265     0086                     	;# 
   266     0087                     	;# 
   267     0088                     	;# 
   268     0089                     	;# 
   269     008C                     	;# 
   270     008D                     	;# 
   271     008E                     	;# 
   272     008F                     	;# 
   273     0090                     	;# 
   274     0091                     	;# 
   275     0092                     	;# 
   276     0093                     	;# 
   277     0093                     	;# 
   278     0093                     	;# 
   279     0094                     	;# 
   280     0095                     	;# 
   281     0096                     	;# 
   282     0097                     	;# 
   283     0098                     	;# 
   284     0099                     	;# 
   285     009A                     	;# 
   286     009B                     	;# 
   287     009C                     	;# 
   288     009D                     	;# 
   289     009E                     	;# 
   290     009F                     	;# 
   291     0105                     	;# 
   292     0107                     	;# 
   293     0108                     	;# 
   294     0109                     	;# 
   295     010C                     	;# 
   296     010C                     	;# 
   297     010D                     	;# 
   298     010E                     	;# 
   299     010F                     	;# 
   300     0185                     	;# 
   301     0187                     	;# 
   302     0188                     	;# 
   303     0189                     	;# 
   304     018C                     	;# 
   305     018D                     	;# 
   306     0000                     	;# 
   307     0001                     	;# 
   308     0002                     	;# 
   309     0003                     	;# 
   310     0004                     	;# 
   311     0005                     	;# 
   312     0006                     	;# 
   313     0007                     	;# 
   314     0008                     	;# 
   315     0009                     	;# 
   316     000A                     	;# 
   317     000B                     	;# 
   318     000C                     	;# 
   319     000D                     	;# 
   320     000E                     	;# 
   321     000E                     	;# 
   322     000F                     	;# 
   323     0010                     	;# 
   324     0011                     	;# 
   325     0012                     	;# 
   326     0013                     	;# 
   327     0014                     	;# 
   328     0015                     	;# 
   329     0015                     	;# 
   330     0016                     	;# 
   331     0017                     	;# 
   332     0018                     	;# 
   333     0019                     	;# 
   334     001A                     	;# 
   335     001B                     	;# 
   336     001B                     	;# 
   337     001C                     	;# 
   338     001D                     	;# 
   339     001E                     	;# 
   340     001F                     	;# 
   341     0081                     	;# 
   342     0085                     	;# 
   343     0086                     	;# 
   344     0087                     	;# 
   345     0088                     	;# 
   346     0089                     	;# 
   347     008C                     	;# 
   348     008D                     	;# 
   349     008E                     	;# 
   350     008F                     	;# 
   351     0090                     	;# 
   352     0091                     	;# 
   353     0092                     	;# 
   354     0093                     	;# 
   355     0093                     	;# 
   356     0093                     	;# 
   357     0094                     	;# 
   358     0095                     	;# 
   359     0096                     	;# 
   360     0097                     	;# 
   361     0098                     	;# 
   362     0099                     	;# 
   363     009A                     	;# 
   364     009B                     	;# 
   365     009C                     	;# 
   366     009D                     	;# 
   367     009E                     	;# 
   368     009F                     	;# 
   369     0105                     	;# 
   370     0107                     	;# 
   371     0108                     	;# 
   372     0109                     	;# 
   373     010C                     	;# 
   374     010C                     	;# 
   375     010D                     	;# 
   376     010E                     	;# 
   377     010F                     	;# 
   378     0185                     	;# 
   379     0187                     	;# 
   380     0188                     	;# 
   381     0189                     	;# 
   382     018C                     	;# 
   383     018D                     	;# 
   384     0000                     	;# 
   385     0001                     	;# 
   386     0002                     	;# 
   387     0003                     	;# 
   388     0004                     	;# 
   389     0005                     	;# 
   390     0006                     	;# 
   391     0007                     	;# 
   392     0008                     	;# 
   393     0009                     	;# 
   394     000A                     	;# 
   395     000B                     	;# 
   396     000C                     	;# 
   397     000D                     	;# 
   398     000E                     	;# 
   399     000E                     	;# 
   400     000F                     	;# 
   401     0010                     	;# 
   402     0011                     	;# 
   403     0012                     	;# 
   404     0013                     	;# 
   405     0014                     	;# 
   406     0015                     	;# 
   407     0015                     	;# 
   408     0016                     	;# 
   409     0017                     	;# 
   410     0018                     	;# 
   411     0019                     	;# 
   412     001A                     	;# 
   413     001B                     	;# 
   414     001B                     	;# 
   415     001C                     	;# 
   416     001D                     	;# 
   417     001E                     	;# 
   418     001F                     	;# 
   419     0081                     	;# 
   420     0085                     	;# 
   421     0086                     	;# 
   422     0087                     	;# 
   423     0088                     	;# 
   424     0089                     	;# 
   425     008C                     	;# 
   426     008D                     	;# 
   427     008E                     	;# 
   428     008F                     	;# 
   429     0090                     	;# 
   430     0091                     	;# 
   431     0092                     	;# 
   432     0093                     	;# 
   433     0093                     	;# 
   434     0093                     	;# 
   435     0094                     	;# 
   436     0095                     	;# 
   437     0096                     	;# 
   438     0097                     	;# 
   439     0098                     	;# 
   440     0099                     	;# 
   441     009A                     	;# 
   442     009B                     	;# 
   443     009C                     	;# 
   444     009D                     	;# 
   445     009E                     	;# 
   446     009F                     	;# 
   447     0105                     	;# 
   448     0107                     	;# 
   449     0108                     	;# 
   450     0109                     	;# 
   451     010C                     	;# 
   452     010C                     	;# 
   453     010D                     	;# 
   454     010E                     	;# 
   455     010F                     	;# 
   456     0185                     	;# 
   457     0187                     	;# 
   458     0188                     	;# 
   459     0189                     	;# 
   460     018C                     	;# 
   461     018D                     	;# 
   462     0000                     	;# 
   463     0001                     	;# 
   464     0002                     	;# 
   465     0003                     	;# 
   466     0004                     	;# 
   467     0005                     	;# 
   468     0006                     	;# 
   469     0007                     	;# 
   470     0008                     	;# 
   471     0009                     	;# 
   472     000A                     	;# 
   473     000B                     	;# 
   474     000C                     	;# 
   475     000D                     	;# 
   476     000E                     	;# 
   477     000E                     	;# 
   478     000F                     	;# 
   479     0010                     	;# 
   480     0011                     	;# 
   481     0012                     	;# 
   482     0013                     	;# 
   483     0014                     	;# 
   484     0015                     	;# 
   485     0015                     	;# 
   486     0016                     	;# 
   487     0017                     	;# 
   488     0018                     	;# 
   489     0019                     	;# 
   490     001A                     	;# 
   491     001B                     	;# 
   492     001B                     	;# 
   493     001C                     	;# 
   494     001D                     	;# 
   495     001E                     	;# 
   496     001F                     	;# 
   497     0081                     	;# 
   498     0085                     	;# 
   499     0086                     	;# 
   500     0087                     	;# 
   501     0088                     	;# 
   502     0089                     	;# 
   503     008C                     	;# 
   504     008D                     	;# 
   505     008E                     	;# 
   506     008F                     	;# 
   507     0090                     	;# 
   508     0091                     	;# 
   509     0092                     	;# 
   510     0093                     	;# 
   511     0093                     	;# 
   512     0093                     	;# 
   513     0094                     	;# 
   514     0095                     	;# 
   515     0096                     	;# 
   516     0097                     	;# 
   517     0098                     	;# 
   518     0099                     	;# 
   519     009A                     	;# 
   520     009B                     	;# 
   521     009C                     	;# 
   522     009D                     	;# 
   523     009E                     	;# 
   524     009F                     	;# 
   525     0105                     	;# 
   526     0107                     	;# 
   527     0108                     	;# 
   528     0109                     	;# 
   529     010C                     	;# 
   530     010C                     	;# 
   531     010D                     	;# 
   532     010E                     	;# 
   533     010F                     	;# 
   534     0185                     	;# 
   535     0187                     	;# 
   536     0188                     	;# 
   537     0189                     	;# 
   538     018C                     	;# 
   539     018D                     	;# 
   540     0000                     	;# 
   541     0001                     	;# 
   542     0002                     	;# 
   543     0003                     	;# 
   544     0004                     	;# 
   545     0005                     	;# 
   546     0006                     	;# 
   547     0007                     	;# 
   548     0008                     	;# 
   549     0009                     	;# 
   550     000A                     	;# 
   551     000B                     	;# 
   552     000C                     	;# 
   553     000D                     	;# 
   554     000E                     	;# 
   555     000E                     	;# 
   556     000F                     	;# 
   557     0010                     	;# 
   558     0011                     	;# 
   559     0012                     	;# 
   560     0013                     	;# 
   561     0014                     	;# 
   562     0015                     	;# 
   563     0015                     	;# 
   564     0016                     	;# 
   565     0017                     	;# 
   566     0018                     	;# 
   567     0019                     	;# 
   568     001A                     	;# 
   569     001B                     	;# 
   570     001B                     	;# 
   571     001C                     	;# 
   572     001D                     	;# 
   573     001E                     	;# 
   574     001F                     	;# 
   575     0081                     	;# 
   576     0085                     	;# 
   577     0086                     	;# 
   578     0087                     	;# 
   579     0088                     	;# 
   580     0089                     	;# 
   581     008C                     	;# 
   582     008D                     	;# 
   583     008E                     	;# 
   584     008F                     	;# 
   585     0090                     	;# 
   586     0091                     	;# 
   587     0092                     	;# 
   588     0093                     	;# 
   589     0093                     	;# 
   590     0093                     	;# 
   591     0094                     	;# 
   592     0095                     	;# 
   593     0096                     	;# 
   594     0097                     	;# 
   595     0098                     	;# 
   596     0099                     	;# 
   597     009A                     	;# 
   598     009B                     	;# 
   599     009C                     	;# 
   600     009D                     	;# 
   601     009E                     	;# 
   602     009F                     	;# 
   603     0105                     	;# 
   604     0107                     	;# 
   605     0108                     	;# 
   606     0109                     	;# 
   607     010C                     	;# 
   608     010C                     	;# 
   609     010D                     	;# 
   610     010E                     	;# 
   611     010F                     	;# 
   612     0185                     	;# 
   613     0187                     	;# 
   614     0188                     	;# 
   615     0189                     	;# 
   616     018C                     	;# 
   617     018D                     	;# 
   618                           
   619                           	psect	strings
   620     0003                     __pstrings:
   621     0003                     stringtab:
   622     0003                     __stringtab:
   623                           
   624                           ;	String table - string pointers are 1 byte each
   625     0003  1BFF               	btfsc	btemp+1,7
   626     0004  280D               	ljmp	stringcode
   627     0005  1383               	bcf	3,7
   628     0006  187F               	btfsc	btemp+1,0
   629     0007  1783               	bsf	3,7
   630     0008  0800               	movf	0,w
   631     0009  0A84               	incf	4,f
   632     000A  1903               	skipnz
   633     000B  0AFF               	incf	btemp+1,f
   634     000C  0008               	return
   635     000D                     stringcode:
   636     000D                     stringdir:
   637     000D  3000               	movlw	high stringdir
   638     000E  008A               	movwf	10
   639     000F  0804               	movf	4,w
   640     0010  0A84               	incf	4,f
   641     0011  0782               	addwf	2,f
   642     0012                     __stringbase:
   643     0012  3400               	retlw	0
   644     0013                     __end_of__stringtab:
   645     0013                     _dpowers:
   646     0013  3401               	retlw	1
   647     0014  3400               	retlw	0
   648     0015  340A               	retlw	10
   649     0016  3400               	retlw	0
   650     0017  3464               	retlw	100
   651     0018  3400               	retlw	0
   652     0019  34E8               	retlw	232
   653     001A  3403               	retlw	3
   654     001B  3410               	retlw	16
   655     001C  3427               	retlw	39
   656     001D                     __end_of_dpowers:
   657     001F                     _ADCON0bits	set	31
   658     000C                     _PIR1bits	set	12
   659     000B                     _INTCONbits	set	11
   660     0005                     _PORTAbits	set	5
   661     0008                     _PORTDbits	set	8
   662     0013                     _SSPBUF	set	19
   663     0014                     _SSPCON	set	20
   664     0009                     _PORTE	set	9
   665     0008                     _PORTD	set	8
   666     0005                     _PORTA	set	5
   667     0006                     _PORTB	set	6
   668     0007                     _PORTCbits	set	7
   669     009F                     _ADCON1bits	set	159
   670     008C                     _PIE1bits	set	140
   671     0085                     _TRISAbits	set	133
   672     0088                     _TRISDbits	set	136
   673     0094                     _SSPSTATbits	set	148
   674     0094                     _SSPSTAT	set	148
   675     008F                     _OSCCONbits	set	143
   676     0088                     _TRISD	set	136
   677     0087                     _TRISCbits	set	135
   678     0085                     _TRISA	set	133
   679     0086                     _TRISB	set	134
   680     043B                     _TRISC3	set	1083
   681     043D                     _TRISC5	set	1085
   682     0188                     _ANSELbits	set	392
   683     0189                     _ANSELH	set	393
   684     001D                     STR_1:
   685     001D  3453               	retlw	83	;'S'
   686     001E  3431               	retlw	49	;'1'
   687     001F  343A               	retlw	58	;':'
   688     0020  3420               	retlw	32	;' '
   689     0021  3420               	retlw	32	;' '
   690     0022  3420               	retlw	32	;' '
   691     0023  3420               	retlw	32	;' '
   692     0024  3453               	retlw	83	;'S'
   693     0025  3432               	retlw	50	;'2'
   694     0026  343A               	retlw	58	;':'
   695     0027  3420               	retlw	32	;' '
   696     0028  3420               	retlw	32	;' '
   697     0029  3420               	retlw	32	;' '
   698     002A  3453               	retlw	83	;'S'
   699     002B  3433               	retlw	51	;'3'
   700     002C  343A               	retlw	58	;':'
   701     002D  3400               	retlw	0
   702     002E                     STR_2:
   703     002E  3425               	retlw	37	;'%'
   704     002F  3475               	retlw	117	;'u'
   705     0030  3400               	retlw	0
   706     0031                     STR_3:
   707     0031  342E               	retlw	46	;'.'
   708     0032  3400               	retlw	0
   709     0031                     
   710                           	psect	cinit
   711     07EB                     start_initialization:	
   712                           ; #config settings
   713                           
   714     07EB                     __initialization:
   715                           
   716                           ; Clear objects allocated to BANK0
   717     07EB  1383               	bcf	3,7	;select IRP bank0
   718     07EC  3056               	movlw	low __pbssBANK0
   719     07ED  0084               	movwf	4
   720     07EE  306F               	movlw	low (__pbssBANK0+25)
   721     07EF  120A  118A  20B1  120A  118A  	fcall	clear_ram0
   722                           
   723                           ; Clear objects allocated to BANK1
   724     07F4  30A0               	movlw	low __pbssBANK1
   725     07F5  0084               	movwf	4
   726     07F6  30B4               	movlw	low (__pbssBANK1+20)
   727     07F7  120A  118A  20B1  120A  118A  	fcall	clear_ram0
   728     07FC                     end_of_initialization:	
   729                           ;End of C runtime variable initialization code
   730                           
   731     07FC                     __end_of__initialization:
   732     07FC  0183               	clrf	3
   733     07FD  120A  118A  2EE7   	ljmp	_main	;jump to C main() function
   734                           
   735                           	psect	bssBANK0
   736     0056                     __pbssBANK0:
   737     0056                     _contador:
   738     0056                     	ds	3
   739     0059                     _voltaje2:
   740     0059                     	ds	3
   741     005C                     _voltaje1:
   742     005C                     	ds	3
   743     005F                     _cont:
   744     005F                     	ds	2
   745     0061                     _d2:
   746     0061                     	ds	2
   747     0063                     _u2:
   748     0063                     	ds	2
   749     0065                     _d1:
   750     0065                     	ds	2
   751     0067                     _u1:
   752     0067                     	ds	2
   753     0069                     _VOLT2:
   754     0069                     	ds	2
   755     006B                     _VOLT1:
   756     006B                     	ds	2
   757     006D                     _V2:
   758     006D                     	ds	1
   759     006E                     _V1:
   760     006E                     	ds	1
   761                           
   762                           	psect	bssBANK1
   763     00A0                     __pbssBANK1:
   764     00A0                     _buffer:
   765     00A0                     	ds	20
   766                           
   767                           	psect	clrtext
   768     00B1                     clear_ram0:	
   769                           ;	Called with FSR containing the base address, and
   770                           ;	W with the last address+1
   771                           
   772     00B1  0064               	clrwdt	;clear the watchdog before getting into this loop
   773     00B2                     clrloop0:
   774     00B2  0180               	clrf	0	;clear RAM location pointed to by FSR
   775     00B3  0A84               	incf	4,f	;increment pointer
   776     00B4  0604               	xorwf	4,w	;XOR with final address
   777     00B5  1903               	btfsc	3,2	;have we reached the end yet?
   778     00B6  3400               	retlw	0	;all done for this memory range, return
   779     00B7  0604               	xorwf	4,w	;XOR again to restore value
   780     00B8  28B2               	goto	clrloop0	;do the next byte
   781                           
   782                           	psect	cstackCOMMON
   783     0070                     __pcstackCOMMON:
   784     0070                     ?_setupINTOSC:
   785     0070                     ??_setupINTOSC:	
   786                           ; 1 bytes @ 0x0
   787                           
   788     0070                     ?_setup:	
   789                           ; 1 bytes @ 0x0
   790                           
   791     0070                     ?_Lcd_Init:	
   792                           ; 1 bytes @ 0x0
   793                           
   794     0070                     ?_Lcd_Clear:	
   795                           ; 1 bytes @ 0x0
   796                           
   797     0070                     ?_spiWrite:	
   798                           ; 1 bytes @ 0x0
   799                           
   800     0070                     ??_spiWrite:	
   801                           ; 1 bytes @ 0x0
   802                           
   803     0070                     ?_spiRead:	
   804                           ; 1 bytes @ 0x0
   805                           
   806     0070                     ??_spiRead:	
   807                           ; 1 bytes @ 0x0
   808                           
   809     0070                     ?_calculovolt:	
   810                           ; 1 bytes @ 0x0
   811                           
   812     0070                     ?_valorLCD:	
   813                           ; 1 bytes @ 0x0
   814                           
   815     0070                     ?_spiInit:	
   816                           ; 1 bytes @ 0x0
   817                           
   818     0070                     ?_main:	
   819                           ; 1 bytes @ 0x0
   820                           
   821     0070                     ?_spiReceiveWait:	
   822                           ; 1 bytes @ 0x0
   823                           
   824     0070                     ??_spiReceiveWait:	
   825                           ; 1 bytes @ 0x0
   826                           
   827     0070                     ?_Lcd_Port:	
   828                           ; 1 bytes @ 0x0
   829                           
   830     0070                     ??_Lcd_Port:	
   831                           ; 1 bytes @ 0x0
   832                           
   833     0070                     ?_Lcd_Cmd:	
   834                           ; 1 bytes @ 0x0
   835                           
   836     0070                     ?_Lcd_Write_Char:	
   837                           ; 1 bytes @ 0x0
   838                           
   839     0070                     ?___lwdiv:	
   840                           ; 1 bytes @ 0x0
   841                           
   842     0070                     ?___lmul:	
   843                           ; 2 bytes @ 0x0
   844                           
   845     0070                     setupINTOSC@IRCF:	
   846                           ; 4 bytes @ 0x0
   847                           
   848     0070                     spiInit@sDataSample:	
   849                           ; 1 bytes @ 0x0
   850                           
   851     0070                     spiWrite@dat:	
   852                           ; 1 bytes @ 0x0
   853                           
   854     0070                     Lcd_Port@a:	
   855                           ; 1 bytes @ 0x0
   856                           
   857     0070                     ___lwdiv@divisor:	
   858                           ; 1 bytes @ 0x0
   859                           
   860     0070                     ___lmul@multiplier:	
   861                           ; 2 bytes @ 0x0
   862                           
   863                           
   864                           ; 4 bytes @ 0x0
   865     0070                     	ds	1
   866     0071                     ??_Lcd_Cmd:
   867     0071                     ??_Lcd_Write_Char:	
   868                           ; 1 bytes @ 0x1
   869                           
   870     0071                     spiInit@sClockIdle:	
   871                           ; 1 bytes @ 0x1
   872                           
   873                           
   874                           ; 1 bytes @ 0x1
   875     0071                     	ds	1
   876     0072                     spiInit@sTransmitEdge:
   877     0072                     Lcd_Write_Char@temp:	
   878                           ; 1 bytes @ 0x2
   879                           
   880     0072                     ___lwdiv@dividend:	
   881                           ; 1 bytes @ 0x2
   882                           
   883                           
   884                           ; 2 bytes @ 0x2
   885     0072                     	ds	1
   886     0073                     ??_spiInit:
   887     0073                     spiInit@sType:	
   888                           ; 1 bytes @ 0x3
   889                           
   890     0073                     Lcd_Cmd@a:	
   891                           ; 1 bytes @ 0x3
   892                           
   893     0073                     Lcd_Write_Char@y:	
   894                           ; 1 bytes @ 0x3
   895                           
   896                           
   897                           ; 1 bytes @ 0x3
   898     0073                     	ds	1
   899     0074                     ??_setup:
   900     0074                     ??_Lcd_Init:	
   901                           ; 1 bytes @ 0x4
   902                           
   903     0074                     ??_Lcd_Clear:	
   904                           ; 1 bytes @ 0x4
   905                           
   906     0074                     ?_Lcd_Set_Cursor:	
   907                           ; 1 bytes @ 0x4
   908                           
   909     0074                     ??___lwdiv:	
   910                           ; 1 bytes @ 0x4
   911                           
   912     0074                     Lcd_Set_Cursor@b:	
   913                           ; 1 bytes @ 0x4
   914                           
   915     0074                     Lcd_Write_Char@a:	
   916                           ; 1 bytes @ 0x4
   917                           
   918     0074                     ___lmul@multiplicand:	
   919                           ; 1 bytes @ 0x4
   920                           
   921                           
   922                           ; 4 bytes @ 0x4
   923     0074                     	ds	1
   924     0075                     ??_Lcd_Set_Cursor:
   925     0075                     ?_Lcd_Write_String:	
   926                           ; 1 bytes @ 0x5
   927                           
   928     0075                     Lcd_Write_String@a:	
   929                           ; 1 bytes @ 0x5
   930                           
   931     0075                     ___lwdiv@quotient:	
   932                           ; 2 bytes @ 0x5
   933                           
   934                           
   935                           ; 2 bytes @ 0x5
   936     0075                     	ds	1
   937     0076                     Lcd_Set_Cursor@a:
   938                           
   939                           ; 1 bytes @ 0x6
   940     0076                     	ds	1
   941     0077                     ??_Lcd_Write_String:
   942     0077                     Lcd_Set_Cursor@z:	
   943                           ; 1 bytes @ 0x7
   944                           
   945     0077                     ___lwdiv@counter:	
   946                           ; 1 bytes @ 0x7
   947                           
   948                           
   949                           ; 1 bytes @ 0x7
   950     0077                     	ds	1
   951     0078                     ??___lmul:
   952     0078                     ?___lwmod:	
   953                           ; 1 bytes @ 0x8
   954                           
   955     0078                     Lcd_Set_Cursor@y:	
   956                           ; 2 bytes @ 0x8
   957                           
   958     0078                     ___lwmod@divisor:	
   959                           ; 1 bytes @ 0x8
   960                           
   961                           
   962                           ; 2 bytes @ 0x8
   963     0078                     	ds	1
   964     0079                     Lcd_Set_Cursor@temp:
   965     0079                     ___lmul@product:	
   966                           ; 1 bytes @ 0x9
   967                           
   968                           
   969                           ; 4 bytes @ 0x9
   970     0079                     	ds	1
   971     007A                     Lcd_Write_String@i:
   972     007A                     ___lwmod@dividend:	
   973                           ; 2 bytes @ 0xA
   974                           
   975                           
   976                           ; 2 bytes @ 0xA
   977     007A                     	ds	2
   978     007C                     ??___lwmod:
   979                           
   980                           ; 1 bytes @ 0xC
   981     007C                     	ds	1
   982     007D                     ??___aldiv:
   983     007D                     ___lwmod@counter:	
   984                           ; 1 bytes @ 0xD
   985                           
   986                           
   987                           ; 1 bytes @ 0xD
   988     007D                     	ds	1
   989     007E                     ??_calculovolt:
   990     007E                     ??_valorLCD:	
   991                           ; 1 bytes @ 0xE
   992                           
   993                           
   994                           	psect	cstackBANK0
   995     0020                     __pcstackBANK0:	
   996                           ; 1 bytes @ 0xE
   997                           
   998     0020                     ?_sprintf:
   999     0020                     ?___aldiv:	
  1000                           ; 2 bytes @ 0x0
  1001                           
  1002     0020                     sprintf@f:	
  1003                           ; 4 bytes @ 0x0
  1004                           
  1005     0020                     ___aldiv@divisor:	
  1006                           ; 1 bytes @ 0x0
  1007                           
  1008                           
  1009                           ; 4 bytes @ 0x0
  1010     0020                     	ds	3
  1011     0023                     ??_sprintf:
  1012                           
  1013                           ; 1 bytes @ 0x3
  1014     0023                     	ds	1
  1015     0024                     ___aldiv@dividend:
  1016                           
  1017                           ; 4 bytes @ 0x4
  1018     0024                     	ds	2
  1019     0026                     sprintf@flag:
  1020                           
  1021                           ; 1 bytes @ 0x6
  1022     0026                     	ds	1
  1023     0027                     sprintf@ap:
  1024                           
  1025                           ; 1 bytes @ 0x7
  1026     0027                     	ds	1
  1027     0028                     ___aldiv@counter:
  1028     0028                     sprintf@val:	
  1029                           ; 1 bytes @ 0x8
  1030                           
  1031                           
  1032                           ; 2 bytes @ 0x8
  1033     0028                     	ds	1
  1034     0029                     ___aldiv@sign:
  1035                           
  1036                           ; 1 bytes @ 0x9
  1037     0029                     	ds	1
  1038     002A                     sprintf@prec:
  1039     002A                     ___aldiv@quotient:	
  1040                           ; 1 bytes @ 0xA
  1041                           
  1042                           
  1043                           ; 4 bytes @ 0xA
  1044     002A                     	ds	1
  1045     002B                     sprintf@sp:
  1046                           
  1047                           ; 1 bytes @ 0xB
  1048     002B                     	ds	1
  1049     002C                     sprintf@c:
  1050                           
  1051                           ; 1 bytes @ 0xC
  1052     002C                     	ds	2
  1053     002E                     ?_map:
  1054     002E                     map@x:	
  1055                           ; 4 bytes @ 0xE
  1056                           
  1057                           
  1058                           ; 4 bytes @ 0xE
  1059     002E                     	ds	4
  1060     0032                     map@eMin:
  1061                           
  1062                           ; 4 bytes @ 0x12
  1063     0032                     	ds	4
  1064     0036                     map@eMax:
  1065                           
  1066                           ; 4 bytes @ 0x16
  1067     0036                     	ds	4
  1068     003A                     map@sMin:
  1069                           
  1070                           ; 4 bytes @ 0x1A
  1071     003A                     	ds	4
  1072     003E                     map@sMax:
  1073                           
  1074                           ; 4 bytes @ 0x1E
  1075     003E                     	ds	4
  1076     0042                     ??_map:
  1077                           
  1078                           ; 1 bytes @ 0x22
  1079     0042                     	ds	16
  1080     0052                     ??_main:
  1081                           
  1082                           ; 1 bytes @ 0x32
  1083     0052                     	ds	4
  1084                           
  1085                           	psect	maintext
  1086     06E7                     __pmaintext:	
  1087 ;;
  1088 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1089 ;;
  1090 ;; *************** function _main *****************
  1091 ;; Defined at:
  1092 ;;		line 68 in file "main.c"
  1093 ;; Parameters:    Size  Location     Type
  1094 ;;		None
  1095 ;; Auto vars:     Size  Location     Type
  1096 ;;		None
  1097 ;; Return value:  Size  Location     Type
  1098 ;;                  1    wreg      void 
  1099 ;; Registers used:
  1100 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1101 ;; Tracked objects:
  1102 ;;		On entry : B00/0
  1103 ;;		On exit  : 0/0
  1104 ;;		Unchanged: 0/0
  1105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1106 ;;      Params:         0       0       0       0       0
  1107 ;;      Locals:         0       0       0       0       0
  1108 ;;      Temps:          0       4       0       0       0
  1109 ;;      Totals:         0       4       0       0       0
  1110 ;;Total ram usage:        4 bytes
  1111 ;; Hardware stack levels required when called: 4
  1112 ;; This function calls:
  1113 ;;		_Lcd_Clear
  1114 ;;		_Lcd_Init
  1115 ;;		_Lcd_Set_Cursor
  1116 ;;		_Lcd_Write_String
  1117 ;;		_calculovolt
  1118 ;;		_map
  1119 ;;		_setup
  1120 ;;		_setupINTOSC
  1121 ;;		_spiRead
  1122 ;;		_spiWrite
  1123 ;;		_valorLCD
  1124 ;; This function is called by:
  1125 ;;		Startup code after reset
  1126 ;; This function uses a non-reentrant model
  1127 ;;
  1128                           
  1129     06E7                     _main:	
  1130                           ;psect for function _main
  1131                           
  1132     06E7                     l1649:	
  1133                           ;incstack = 0
  1134                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1135                           
  1136                           
  1137                           ;main.c: 69:     setupINTOSC(6);
  1138     06E7  3006               	movlw	6
  1139     06E8  120A  118A  22CE  120A  118A  	fcall	_setupINTOSC
  1140                           
  1141                           ;main.c: 70:     setup();
  1142     06ED  120A  118A  2121  120A  118A  	fcall	_setup
  1143                           
  1144                           ;main.c: 71:     Lcd_Init();
  1145     06F2  120A  118A  232D  120A  118A  	fcall	_Lcd_Init
  1146     06F7                     l1651:
  1147                           
  1148                           ;main.c: 72:     _delay((unsigned long)((100)*(4000000/4000000.0)));
  1149     06F7  3020               	movlw	32
  1150     06F8  1283               	bcf	3,5	;RP0=0, select bank0
  1151     06F9  1303               	bcf	3,6	;RP1=0, select bank0
  1152     06FA  00D2               	movwf	??_main
  1153     06FB                     u1317:
  1154     06FB  0BD2               	decfsz	??_main,f
  1155     06FC  2EFB               	goto	u1317
  1156     06FD  0000               	nop
  1157     06FE                     l1653:
  1158                           
  1159                           ;main.c: 73:     Lcd_Clear();
  1160     06FE  120A  118A  20C2  120A  118A  	fcall	_Lcd_Clear
  1161     0703                     l1655:
  1162                           
  1163                           ;main.c: 74:     Lcd_Set_Cursor(1,1);
  1164     0703  01F4               	clrf	Lcd_Set_Cursor@b
  1165     0704  0AF4               	incf	Lcd_Set_Cursor@b,f
  1166     0705  3001               	movlw	1
  1167     0706  120A  118A  2397  120A  118A  	fcall	_Lcd_Set_Cursor
  1168     070B                     l1657:
  1169                           
  1170                           ;main.c: 75:     Lcd_Write_String("S1:    S2:   S3:");
  1171     070B  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1172     070C  00F5               	movwf	Lcd_Write_String@a
  1173     070D  3080               	movlw	128
  1174     070E  00F6               	movwf	Lcd_Write_String@a+1
  1175     070F  120A  118A  21B3  120A  118A  	fcall	_Lcd_Write_String
  1176     0714                     l1659:
  1177                           
  1178                           ;main.c: 79:         setup();
  1179     0714  120A  118A  2121  120A  118A  	fcall	_setup
  1180     0719                     l1661:
  1181                           
  1182                           ;main.c: 80:         PORTCbits.RC1 = 0;
  1183     0719  1283               	bcf	3,5	;RP0=0, select bank0
  1184     071A  1303               	bcf	3,6	;RP1=0, select bank0
  1185     071B  1087               	bcf	7,1	;volatile
  1186     071C                     l1663:
  1187                           
  1188                           ;main.c: 81:         _delay((unsigned long)((1)*(4000000/4000.0)));
  1189     071C  30C7               	movlw	199
  1190     071D  1283               	bcf	3,5	;RP0=0, select bank0
  1191     071E  1303               	bcf	3,6	;RP1=0, select bank0
  1192     071F  00D2               	movwf	??_main
  1193     0720                     u1327:
  1194     0720  2F21               	nop2
  1195     0721  0BD2               	decfsz	??_main,f
  1196     0722  2F20               	goto	u1327
  1197     0723  2F24               	nop2
  1198     0724                     l1665:
  1199                           
  1200                           ;main.c: 82:         spiWrite(PORTB);
  1201     0724  1283               	bcf	3,5	;RP0=0, select bank0
  1202     0725  1303               	bcf	3,6	;RP1=0, select bank0
  1203     0726  0806               	movf	6,w	;volatile
  1204     0727  120A  118A  20A4  120A  118A  	fcall	_spiWrite
  1205     072C                     l1667:
  1206                           
  1207                           ;main.c: 83:         V1 = spiRead();
  1208     072C  120A  118A  20B9  120A  118A  	fcall	_spiRead
  1209     0731  1283               	bcf	3,5	;RP0=0, select bank0
  1210     0732  1303               	bcf	3,6	;RP1=0, select bank0
  1211     0733  00EE               	movwf	_V1
  1212     0734                     l1669:
  1213                           
  1214                           ;main.c: 85:         VOLT1 = map(V1, 0, 255, 1, 200);
  1215     0734  086E               	movf	_V1,w
  1216     0735  00D2               	movwf	??_main
  1217     0736  01D3               	clrf	??_main+1
  1218     0737  01D4               	clrf	??_main+2
  1219     0738  01D5               	clrf	??_main+3
  1220     0739  0855               	movf	??_main+3,w
  1221     073A  00B1               	movwf	map@x+3
  1222     073B  0854               	movf	??_main+2,w
  1223     073C  00B0               	movwf	map@x+2
  1224     073D  0853               	movf	??_main+1,w
  1225     073E  00AF               	movwf	map@x+1
  1226     073F  0852               	movf	??_main,w
  1227     0740  00AE               	movwf	map@x
  1228     0741  3000               	movlw	0
  1229     0742  00B5               	movwf	map@eMin+3
  1230     0743  3000               	movlw	0
  1231     0744  00B4               	movwf	map@eMin+2
  1232     0745  3000               	movlw	0
  1233     0746  00B3               	movwf	map@eMin+1
  1234     0747  3000               	movlw	0
  1235     0748  00B2               	movwf	map@eMin
  1236     0749  3000               	movlw	0
  1237     074A  00B9               	movwf	map@eMax+3
  1238     074B  3000               	movlw	0
  1239     074C  00B8               	movwf	map@eMax+2
  1240     074D  3000               	movlw	0
  1241     074E  00B7               	movwf	map@eMax+1
  1242     074F  30FF               	movlw	255
  1243     0750  00B6               	movwf	map@eMax
  1244     0751  3000               	movlw	0
  1245     0752  00BD               	movwf	map@sMin+3
  1246     0753  3000               	movlw	0
  1247     0754  00BC               	movwf	map@sMin+2
  1248     0755  3000               	movlw	0
  1249     0756  00BB               	movwf	map@sMin+1
  1250     0757  3001               	movlw	1
  1251     0758  00BA               	movwf	map@sMin
  1252     0759  3000               	movlw	0
  1253     075A  00C1               	movwf	map@sMax+3
  1254     075B  3000               	movlw	0
  1255     075C  00C0               	movwf	map@sMax+2
  1256     075D  3000               	movlw	0
  1257     075E  00BF               	movwf	map@sMax+1
  1258     075F  30C8               	movlw	200
  1259     0760  00BE               	movwf	map@sMax
  1260     0761  120A  118A  24C1  120A  118A  	fcall	_map
  1261     0766  1283               	bcf	3,5	;RP0=0, select bank0
  1262     0767  1303               	bcf	3,6	;RP1=0, select bank0
  1263     0768  082F               	movf	?_map+1,w
  1264     0769  00EC               	movwf	_VOLT1+1
  1265     076A  082E               	movf	?_map,w
  1266     076B  00EB               	movwf	_VOLT1
  1267     076C                     l1671:
  1268                           
  1269                           ;main.c: 86:         calculovolt();
  1270     076C  120A  118A  227F  120A  118A  	fcall	_calculovolt
  1271                           
  1272                           ;main.c: 87:         valorLCD();
  1273     0771  120A  118A  2569  120A  118A  	fcall	_valorLCD
  1274     0776                     l1673:
  1275                           
  1276                           ;main.c: 88:         _delay((unsigned long)((1)*(4000000/4000.0)));
  1277     0776  30C7               	movlw	199
  1278     0777  1283               	bcf	3,5	;RP0=0, select bank0
  1279     0778  1303               	bcf	3,6	;RP1=0, select bank0
  1280     0779  00D2               	movwf	??_main
  1281     077A                     u1337:
  1282     077A  2F7B               	nop2
  1283     077B  0BD2               	decfsz	??_main,f
  1284     077C  2F7A               	goto	u1337
  1285     077D  2F7E               	nop2
  1286     077E                     l1675:
  1287                           
  1288                           ;main.c: 89:         PORTCbits.RC1 = 1;
  1289     077E  1283               	bcf	3,5	;RP0=0, select bank0
  1290     077F  1303               	bcf	3,6	;RP1=0, select bank0
  1291     0780  1487               	bsf	7,1	;volatile
  1292     0781                     l1677:
  1293                           
  1294                           ;main.c: 91:         PORTCbits.RC2 = 0;
  1295     0781  1107               	bcf	7,2	;volatile
  1296     0782                     l1679:
  1297                           
  1298                           ;main.c: 92:         _delay((unsigned long)((1)*(4000000/4000.0)));
  1299     0782  30C7               	movlw	199
  1300     0783  1283               	bcf	3,5	;RP0=0, select bank0
  1301     0784  1303               	bcf	3,6	;RP1=0, select bank0
  1302     0785  00D2               	movwf	??_main
  1303     0786                     u1347:
  1304     0786  2F87               	nop2
  1305     0787  0BD2               	decfsz	??_main,f
  1306     0788  2F86               	goto	u1347
  1307     0789  2F8A               	nop2
  1308     078A                     l1681:
  1309                           
  1310                           ;main.c: 93:         spiWrite(PORTB);
  1311     078A  1283               	bcf	3,5	;RP0=0, select bank0
  1312     078B  1303               	bcf	3,6	;RP1=0, select bank0
  1313     078C  0806               	movf	6,w	;volatile
  1314     078D  120A  118A  20A4  120A  118A  	fcall	_spiWrite
  1315     0792                     l1683:
  1316                           
  1317                           ;main.c: 94:         V2 = spiRead();
  1318     0792  120A  118A  20B9  120A  118A  	fcall	_spiRead
  1319     0797  1283               	bcf	3,5	;RP0=0, select bank0
  1320     0798  1303               	bcf	3,6	;RP1=0, select bank0
  1321     0799  00ED               	movwf	_V2
  1322     079A                     l1685:
  1323                           
  1324                           ;main.c: 96:         VOLT2 = map(V2, 0, 255, 1, 200);
  1325     079A  086D               	movf	_V2,w
  1326     079B  00D2               	movwf	??_main
  1327     079C  01D3               	clrf	??_main+1
  1328     079D  01D4               	clrf	??_main+2
  1329     079E  01D5               	clrf	??_main+3
  1330     079F  0855               	movf	??_main+3,w
  1331     07A0  00B1               	movwf	map@x+3
  1332     07A1  0854               	movf	??_main+2,w
  1333     07A2  00B0               	movwf	map@x+2
  1334     07A3  0853               	movf	??_main+1,w
  1335     07A4  00AF               	movwf	map@x+1
  1336     07A5  0852               	movf	??_main,w
  1337     07A6  00AE               	movwf	map@x
  1338     07A7  3000               	movlw	0
  1339     07A8  00B5               	movwf	map@eMin+3
  1340     07A9  3000               	movlw	0
  1341     07AA  00B4               	movwf	map@eMin+2
  1342     07AB  3000               	movlw	0
  1343     07AC  00B3               	movwf	map@eMin+1
  1344     07AD  3000               	movlw	0
  1345     07AE  00B2               	movwf	map@eMin
  1346     07AF  3000               	movlw	0
  1347     07B0  00B9               	movwf	map@eMax+3
  1348     07B1  3000               	movlw	0
  1349     07B2  00B8               	movwf	map@eMax+2
  1350     07B3  3000               	movlw	0
  1351     07B4  00B7               	movwf	map@eMax+1
  1352     07B5  30FF               	movlw	255
  1353     07B6  00B6               	movwf	map@eMax
  1354     07B7  3000               	movlw	0
  1355     07B8  00BD               	movwf	map@sMin+3
  1356     07B9  3000               	movlw	0
  1357     07BA  00BC               	movwf	map@sMin+2
  1358     07BB  3000               	movlw	0
  1359     07BC  00BB               	movwf	map@sMin+1
  1360     07BD  3001               	movlw	1
  1361     07BE  00BA               	movwf	map@sMin
  1362     07BF  3000               	movlw	0
  1363     07C0  00C1               	movwf	map@sMax+3
  1364     07C1  3000               	movlw	0
  1365     07C2  00C0               	movwf	map@sMax+2
  1366     07C3  3000               	movlw	0
  1367     07C4  00BF               	movwf	map@sMax+1
  1368     07C5  30C8               	movlw	200
  1369     07C6  00BE               	movwf	map@sMax
  1370     07C7  120A  118A  24C1  120A  118A  	fcall	_map
  1371     07CC  1283               	bcf	3,5	;RP0=0, select bank0
  1372     07CD  1303               	bcf	3,6	;RP1=0, select bank0
  1373     07CE  082F               	movf	?_map+1,w
  1374     07CF  00EA               	movwf	_VOLT2+1
  1375     07D0  082E               	movf	?_map,w
  1376     07D1  00E9               	movwf	_VOLT2
  1377     07D2                     l1687:
  1378                           
  1379                           ;main.c: 97:         calculovolt();
  1380     07D2  120A  118A  227F  120A  118A  	fcall	_calculovolt
  1381                           
  1382                           ;main.c: 98:         valorLCD();
  1383     07D7  120A  118A  2569  120A  118A  	fcall	_valorLCD
  1384     07DC                     l1689:
  1385                           
  1386                           ;main.c: 99:         _delay((unsigned long)((1)*(4000000/4000.0)));
  1387     07DC  30C7               	movlw	199
  1388     07DD  1283               	bcf	3,5	;RP0=0, select bank0
  1389     07DE  1303               	bcf	3,6	;RP1=0, select bank0
  1390     07DF  00D2               	movwf	??_main
  1391     07E0                     u1357:
  1392     07E0  2FE1               	nop2
  1393     07E1  0BD2               	decfsz	??_main,f
  1394     07E2  2FE0               	goto	u1357
  1395     07E3  2FE4               	nop2
  1396     07E4                     l1691:
  1397                           
  1398                           ;main.c: 100:         PORTCbits.RC2 = 1;
  1399     07E4  1283               	bcf	3,5	;RP0=0, select bank0
  1400     07E5  1303               	bcf	3,6	;RP1=0, select bank0
  1401     07E6  1507               	bsf	7,2	;volatile
  1402     07E7  2F14               	goto	l1659
  1403     07E8  120A  118A  2800   	ljmp	start
  1404     07EB                     __end_of_main:
  1405                           
  1406                           	psect	text1
  1407     0569                     __ptext1:	
  1408 ;; *************** function _valorLCD *****************
  1409 ;; Defined at:
  1410 ;;		line 141 in file "main.c"
  1411 ;; Parameters:    Size  Location     Type
  1412 ;;		None
  1413 ;; Auto vars:     Size  Location     Type
  1414 ;;		None
  1415 ;; Return value:  Size  Location     Type
  1416 ;;                  1    wreg      void 
  1417 ;; Registers used:
  1418 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1419 ;; Tracked objects:
  1420 ;;		On entry : 0/0
  1421 ;;		On exit  : 0/0
  1422 ;;		Unchanged: 0/0
  1423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1424 ;;      Params:         0       0       0       0       0
  1425 ;;      Locals:         0       0       0       0       0
  1426 ;;      Temps:          0       0       0       0       0
  1427 ;;      Totals:         0       0       0       0       0
  1428 ;;Total ram usage:        0 bytes
  1429 ;; Hardware stack levels used: 1
  1430 ;; Hardware stack levels required when called: 3
  1431 ;; This function calls:
  1432 ;;		_Lcd_Set_Cursor
  1433 ;;		_Lcd_Write_String
  1434 ;;		_sprintf
  1435 ;; This function is called by:
  1436 ;;		_main
  1437 ;; This function uses a non-reentrant model
  1438 ;;
  1439                           
  1440     0569                     _valorLCD:	
  1441                           ;psect for function _valorLCD
  1442                           
  1443     0569                     l1623:	
  1444                           ;incstack = 0
  1445                           ; Regs used in _valorLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1446                           
  1447                           
  1448                           ;main.c: 142:     Lcd_Set_Cursor(2,1);
  1449     0569  01F4               	clrf	Lcd_Set_Cursor@b
  1450     056A  0AF4               	incf	Lcd_Set_Cursor@b,f
  1451     056B  3002               	movlw	2
  1452     056C  120A  118A  2397  120A  118A  	fcall	_Lcd_Set_Cursor
  1453     0571                     l1625:
  1454                           
  1455                           ;main.c: 143:     sprintf(buffer, "%u", u1);
  1456     0571  301C               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1457     0572  1283               	bcf	3,5	;RP0=0, select bank0
  1458     0573  1303               	bcf	3,6	;RP1=0, select bank0
  1459     0574  00A0               	movwf	sprintf@f
  1460     0575  0868               	movf	_u1+1,w
  1461     0576  00A2               	movwf	?_sprintf+2
  1462     0577  0867               	movf	_u1,w
  1463     0578  00A1               	movwf	?_sprintf+1
  1464     0579  30A0               	movlw	(low (_buffer| 0))& (0+255)
  1465     057A  120A  118A  2626  120A  118A  	fcall	_sprintf
  1466     057F                     l1627:
  1467                           
  1468                           ;main.c: 144:     Lcd_Write_String(buffer);
  1469     057F  30A0               	movlw	(low (_buffer| 0))& (0+255)
  1470     0580  00F5               	movwf	Lcd_Write_String@a
  1471     0581  3000               	movlw	0
  1472     0582  00F6               	movwf	Lcd_Write_String@a+1
  1473     0583  120A  118A  21B3  120A  118A  	fcall	_Lcd_Write_String
  1474                           
  1475                           ;main.c: 146:     Lcd_Set_Cursor(2,2);
  1476     0588  3002               	movlw	2
  1477     0589  00F4               	movwf	Lcd_Set_Cursor@b
  1478     058A  3002               	movlw	2
  1479     058B  120A  118A  2397  120A  118A  	fcall	_Lcd_Set_Cursor
  1480     0590                     l1629:
  1481                           
  1482                           ;main.c: 147:     Lcd_Write_String(".");
  1483     0590  301F               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1484     0591  00F5               	movwf	Lcd_Write_String@a
  1485     0592  3080               	movlw	128
  1486     0593  00F6               	movwf	Lcd_Write_String@a+1
  1487     0594  120A  118A  21B3  120A  118A  	fcall	_Lcd_Write_String
  1488     0599                     l1631:
  1489                           
  1490                           ;main.c: 149:     Lcd_Set_Cursor(2,3);
  1491     0599  3003               	movlw	3
  1492     059A  00F4               	movwf	Lcd_Set_Cursor@b
  1493     059B  3002               	movlw	2
  1494     059C  120A  118A  2397  120A  118A  	fcall	_Lcd_Set_Cursor
  1495                           
  1496                           ;main.c: 150:     sprintf(buffer, "%u", d1);
  1497     05A1  301C               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1498     05A2  1283               	bcf	3,5	;RP0=0, select bank0
  1499     05A3  1303               	bcf	3,6	;RP1=0, select bank0
  1500     05A4  00A0               	movwf	sprintf@f
  1501     05A5  0866               	movf	_d1+1,w
  1502     05A6  00A2               	movwf	?_sprintf+2
  1503     05A7  0865               	movf	_d1,w
  1504     05A8  00A1               	movwf	?_sprintf+1
  1505     05A9  30A0               	movlw	(low (_buffer| 0))& (0+255)
  1506     05AA  120A  118A  2626  120A  118A  	fcall	_sprintf
  1507                           
  1508                           ;main.c: 151:     Lcd_Write_String(buffer);
  1509     05AF  30A0               	movlw	(low (_buffer| 0))& (0+255)
  1510     05B0  00F5               	movwf	Lcd_Write_String@a
  1511     05B1  3000               	movlw	0
  1512     05B2  00F6               	movwf	Lcd_Write_String@a+1
  1513     05B3  120A  118A  21B3  120A  118A  	fcall	_Lcd_Write_String
  1514     05B8                     l1633:
  1515                           
  1516                           ;main.c: 153:     Lcd_Set_Cursor(2,12);
  1517     05B8  300C               	movlw	12
  1518     05B9  00F4               	movwf	Lcd_Set_Cursor@b
  1519     05BA  3002               	movlw	2
  1520     05BB  120A  118A  2397  120A  118A  	fcall	_Lcd_Set_Cursor
  1521     05C0                     l1635:
  1522                           
  1523                           ;main.c: 154:     sprintf(buffer, "%u", u2);
  1524     05C0  301C               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1525     05C1  1283               	bcf	3,5	;RP0=0, select bank0
  1526     05C2  1303               	bcf	3,6	;RP1=0, select bank0
  1527     05C3  00A0               	movwf	sprintf@f
  1528     05C4  0864               	movf	_u2+1,w
  1529     05C5  00A2               	movwf	?_sprintf+2
  1530     05C6  0863               	movf	_u2,w
  1531     05C7  00A1               	movwf	?_sprintf+1
  1532     05C8  30A0               	movlw	(low (_buffer| 0))& (0+255)
  1533     05C9  120A  118A  2626  120A  118A  	fcall	_sprintf
  1534     05CE                     l1637:
  1535                           
  1536                           ;main.c: 155:     Lcd_Write_String(buffer);
  1537     05CE  30A0               	movlw	(low (_buffer| 0))& (0+255)
  1538     05CF  00F5               	movwf	Lcd_Write_String@a
  1539     05D0  3000               	movlw	0
  1540     05D1  00F6               	movwf	Lcd_Write_String@a+1
  1541     05D2  120A  118A  21B3  120A  118A  	fcall	_Lcd_Write_String
  1542     05D7                     l1639:
  1543                           
  1544                           ;main.c: 157:     Lcd_Set_Cursor(2,13);
  1545     05D7  300D               	movlw	13
  1546     05D8  00F4               	movwf	Lcd_Set_Cursor@b
  1547     05D9  3002               	movlw	2
  1548     05DA  120A  118A  2397  120A  118A  	fcall	_Lcd_Set_Cursor
  1549                           
  1550                           ;main.c: 158:     Lcd_Write_String(".");
  1551     05DF  301F               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1552     05E0  00F5               	movwf	Lcd_Write_String@a
  1553     05E1  3080               	movlw	128
  1554     05E2  00F6               	movwf	Lcd_Write_String@a+1
  1555     05E3  120A  118A  21B3  120A  118A  	fcall	_Lcd_Write_String
  1556     05E8                     l1641:
  1557                           
  1558                           ;main.c: 160:     Lcd_Set_Cursor(2,14);
  1559     05E8  300E               	movlw	14
  1560     05E9  00F4               	movwf	Lcd_Set_Cursor@b
  1561     05EA  3002               	movlw	2
  1562     05EB  120A  118A  2397  120A  118A  	fcall	_Lcd_Set_Cursor
  1563     05F0                     l1643:
  1564                           
  1565                           ;main.c: 161:     sprintf(buffer, "%u", d2);
  1566     05F0  301C               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1567     05F1  1283               	bcf	3,5	;RP0=0, select bank0
  1568     05F2  1303               	bcf	3,6	;RP1=0, select bank0
  1569     05F3  00A0               	movwf	sprintf@f
  1570     05F4  0862               	movf	_d2+1,w
  1571     05F5  00A2               	movwf	?_sprintf+2
  1572     05F6  0861               	movf	_d2,w
  1573     05F7  00A1               	movwf	?_sprintf+1
  1574     05F8  30A0               	movlw	(low (_buffer| 0))& (0+255)
  1575     05F9  120A  118A  2626  120A  118A  	fcall	_sprintf
  1576     05FE                     l1645:
  1577                           
  1578                           ;main.c: 162:     Lcd_Write_String(buffer);
  1579     05FE  30A0               	movlw	(low (_buffer| 0))& (0+255)
  1580     05FF  00F5               	movwf	Lcd_Write_String@a
  1581     0600  3000               	movlw	0
  1582     0601  00F6               	movwf	Lcd_Write_String@a+1
  1583     0602  120A  118A  21B3  120A  118A  	fcall	_Lcd_Write_String
  1584     0607                     l1647:
  1585                           
  1586                           ;main.c: 164:     Lcd_Set_Cursor(2,7);
  1587     0607  3007               	movlw	7
  1588     0608  00F4               	movwf	Lcd_Set_Cursor@b
  1589     0609  3002               	movlw	2
  1590     060A  120A  118A  2397  120A  118A  	fcall	_Lcd_Set_Cursor
  1591                           
  1592                           ;main.c: 165:     sprintf(buffer, "%u", cont);
  1593     060F  301C               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1594     0610  1283               	bcf	3,5	;RP0=0, select bank0
  1595     0611  1303               	bcf	3,6	;RP1=0, select bank0
  1596     0612  00A0               	movwf	sprintf@f
  1597     0613  3000               	movlw	0
  1598     0614  00A1               	movwf	?_sprintf+1
  1599     0615  00A2               	movwf	?_sprintf+2
  1600     0616  30A0               	movlw	(low (_buffer| 0))& (0+255)
  1601     0617  120A  118A  2626  120A  118A  	fcall	_sprintf
  1602                           
  1603                           ;main.c: 166:     Lcd_Write_String(buffer);
  1604     061C  30A0               	movlw	(low (_buffer| 0))& (0+255)
  1605     061D  00F5               	movwf	Lcd_Write_String@a
  1606     061E  3000               	movlw	0
  1607     061F  00F6               	movwf	Lcd_Write_String@a+1
  1608     0620  120A  118A  21B3  120A  118A  	fcall	_Lcd_Write_String
  1609     0625                     l88:
  1610     0625  0008               	return
  1611     0626                     __end_of_valorLCD:
  1612                           
  1613                           	psect	text2
  1614     0626                     __ptext2:	
  1615 ;; *************** function _sprintf *****************
  1616 ;; Defined at:
  1617 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c"
  1618 ;; Parameters:    Size  Location     Type
  1619 ;;  sp              1    wreg     PTR unsigned char 
  1620 ;;		 -> buffer(20), 
  1621 ;;  f               1    0[BANK0 ] PTR const unsigned char 
  1622 ;;		 -> STR_8(3), STR_7(3), STR_5(3), STR_4(3), 
  1623 ;;		 -> STR_2(3), 
  1624 ;; Auto vars:     Size  Location     Type
  1625 ;;  sp              1   11[BANK0 ] PTR unsigned char 
  1626 ;;		 -> buffer(20), 
  1627 ;;  tmpval          4    0        struct .
  1628 ;;  val             2    8[BANK0 ] unsigned int 
  1629 ;;  cp              2    0        PTR const unsigned char 
  1630 ;;  len             2    0        unsigned int 
  1631 ;;  c               1   12[BANK0 ] unsigned char 
  1632 ;;  prec            1   10[BANK0 ] char 
  1633 ;;  ap              1    7[BANK0 ] PTR void [1]
  1634 ;;		 -> ?_sprintf(2), 
  1635 ;;  flag            1    6[BANK0 ] unsigned char 
  1636 ;; Return value:  Size  Location     Type
  1637 ;;                  2    0[BANK0 ] int 
  1638 ;; Registers used:
  1639 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1640 ;; Tracked objects:
  1641 ;;		On entry : 0/0
  1642 ;;		On exit  : 0/0
  1643 ;;		Unchanged: 0/0
  1644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1645 ;;      Params:         0       3       0       0       0
  1646 ;;      Locals:         0       7       0       0       0
  1647 ;;      Temps:          0       3       0       0       0
  1648 ;;      Totals:         0      13       0       0       0
  1649 ;;Total ram usage:       13 bytes
  1650 ;; Hardware stack levels used: 1
  1651 ;; Hardware stack levels required when called: 1
  1652 ;; This function calls:
  1653 ;;		___lwdiv
  1654 ;;		___lwmod
  1655 ;; This function is called by:
  1656 ;;		_valorLCD
  1657 ;; This function uses a non-reentrant model
  1658 ;;
  1659                           
  1660     0626                     _sprintf:	
  1661                           ;psect for function _sprintf
  1662                           
  1663                           
  1664                           ;incstack = 0
  1665                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1666                           ;sprintf@sp stored from wreg
  1667     0626  1283               	bcf	3,5	;RP0=0, select bank0
  1668     0627  1303               	bcf	3,6	;RP1=0, select bank0
  1669     0628  00AB               	movwf	sprintf@sp
  1670     0629                     l1455:
  1671                           
  1672                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
  1673     0629  3021               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1674     062A  00A7               	movwf	sprintf@ap
  1675                           
  1676                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1677     062B  2ED2               	goto	l1497
  1678     062C                     l1457:
  1679                           
  1680                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  1681     062C  3025               	movlw	37
  1682     062D  062C               	xorwf	sprintf@c,w
  1683     062E  1903               	btfsc	3,2
  1684     062F  2E31               	goto	u991
  1685     0630  2E32               	goto	u990
  1686     0631                     u991:
  1687     0631  2E3C               	goto	l1463
  1688     0632                     u990:
  1689     0632                     l1459:
  1690                           
  1691                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  1692     0632  082B               	movf	sprintf@sp,w
  1693     0633  0084               	movwf	4
  1694     0634  082C               	movf	sprintf@c,w
  1695     0635  1383               	bcf	3,7	;select IRP bank0
  1696     0636  0080               	movwf	0
  1697     0637                     l1461:
  1698     0637  3001               	movlw	1
  1699     0638  00A3               	movwf	??_sprintf
  1700     0639  0823               	movf	??_sprintf,w
  1701     063A  07AB               	addwf	sprintf@sp,f
  1702                           
  1703                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 559:    continue;
  1704     063B  2ED2               	goto	l1497
  1705     063C                     l1463:
  1706                           
  1707                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  1708     063C  01A6               	clrf	sprintf@flag
  1709                           
  1710                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
  1711     063D  2E43               	goto	l1469
  1712     063E                     l1465:
  1713                           
  1714                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 844:    flag |= 0
      +                          xC0;
  1715     063E  30C0               	movlw	192
  1716     063F  00A3               	movwf	??_sprintf
  1717     0640  0823               	movf	??_sprintf,w
  1718     0641  04A6               	iorwf	sprintf@flag,f
  1719                           
  1720                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 845:    break;
  1721     0642  2E5D               	goto	l1471
  1722     0643                     l1469:
  1723     0643  3001               	movlw	1
  1724     0644  07A0               	addwf	sprintf@f,f
  1725     0645  30FF               	movlw	-1
  1726     0646  0720               	addwf	sprintf@f,w
  1727     0647  0084               	movwf	4
  1728     0648  120A  118A  200D  120A  118A  	fcall	stringdir
  1729     064D  00AC               	movwf	sprintf@c
  1730     064E  00A3               	movwf	??_sprintf
  1731     064F  01A4               	clrf	??_sprintf+1
  1732                           
  1733                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1734                           ; Switch size 1, requested type "simple"
  1735                           ; Number of cases is 1, Range of values is 0 to 0
  1736                           ; switch strategies available:
  1737                           ; Name         Instructions Cycles
  1738                           ; simple_byte            4     3 (average)
  1739                           ; direct_byte           11     8 (fixed)
  1740                           ; jumptable            260     6 (fixed)
  1741                           ;	Chosen strategy is simple_byte
  1742     0650  0824               	movf	??_sprintf+1,w
  1743     0651  3A00               	xorlw	0	; case 0
  1744     0652  1903               	skipnz
  1745     0653  2E55               	goto	l1721
  1746     0654  2ED2               	goto	l1497
  1747     0655                     l1721:
  1748                           
  1749                           ; Switch size 1, requested type "simple"
  1750                           ; Number of cases is 2, Range of values is 0 to 117
  1751                           ; switch strategies available:
  1752                           ; Name         Instructions Cycles
  1753                           ; simple_byte            7     4 (average)
  1754                           ; jumptable            260     6 (fixed)
  1755                           ;	Chosen strategy is simple_byte
  1756     0655  0823               	movf	??_sprintf,w
  1757     0656  3A00               	xorlw	0	; case 0
  1758     0657  1903               	skipnz
  1759     0658  2EE2               	goto	l1499
  1760     0659  3A75               	xorlw	117	; case 117
  1761     065A  1903               	skipnz
  1762     065B  2E3E               	goto	l1465
  1763     065C  2ED2               	goto	l1497
  1764     065D                     l1471:
  1765                           
  1766                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1299:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1312:     val = (*(unsign
      +                          ed *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1767     065D  0827               	movf	sprintf@ap,w
  1768     065E  0084               	movwf	4
  1769     065F  1383               	bcf	3,7	;select IRP bank0
  1770     0660  0800               	movf	0,w
  1771     0661  00A8               	movwf	sprintf@val
  1772     0662  0A84               	incf	4,f
  1773     0663  0800               	movf	0,w
  1774     0664  00A9               	movwf	sprintf@val+1
  1775     0665                     l1473:
  1776     0665  3002               	movlw	2
  1777     0666  00A3               	movwf	??_sprintf
  1778     0667  0823               	movf	??_sprintf,w
  1779     0668  07A7               	addwf	sprintf@ap,f
  1780     0669                     l1475:
  1781                           
  1782                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1313:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  1783     0669  01AC               	clrf	sprintf@c
  1784     066A  0AAC               	incf	sprintf@c,f
  1785     066B                     l1481:
  1786                           
  1787                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  1788     066B  082C               	movf	sprintf@c,w
  1789     066C  00A3               	movwf	??_sprintf
  1790     066D  0723               	addwf	??_sprintf,w
  1791     066E  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1792     066F  0084               	movwf	4
  1793     0670  120A  118A  200D  120A  118A  	fcall	stringdir
  1794     0675  00A4               	movwf	??_sprintf+1
  1795     0676  120A  118A  200D  120A  118A  	fcall	stringdir
  1796     067B  00A5               	movwf	??_sprintf+2
  1797     067C  0825               	movf	??_sprintf+2,w
  1798     067D  0229               	subwf	sprintf@val+1,w
  1799     067E  1D03               	skipz
  1800     067F  2E82               	goto	u1005
  1801     0680  0824               	movf	??_sprintf+1,w
  1802     0681  0228               	subwf	sprintf@val,w
  1803     0682                     u1005:
  1804     0682  1803               	skipnc
  1805     0683  2E85               	goto	u1001
  1806     0684  2E86               	goto	u1000
  1807     0685                     u1001:
  1808     0685  2E87               	goto	l1485
  1809     0686                     u1000:
  1810     0686  2E91               	goto	l1487
  1811     0687                     l1485:
  1812     0687  3001               	movlw	1
  1813     0688  00A3               	movwf	??_sprintf
  1814     0689  0823               	movf	??_sprintf,w
  1815     068A  07AC               	addwf	sprintf@c,f
  1816     068B  3005               	movlw	5
  1817     068C  062C               	xorwf	sprintf@c,w
  1818     068D  1D03               	btfss	3,2
  1819     068E  2E90               	goto	u1011
  1820     068F  2E91               	goto	u1010
  1821     0690                     u1011:
  1822     0690  2E6B               	goto	l1481
  1823     0691                     u1010:
  1824     0691                     l1487:
  1825                           
  1826                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1495:   };C:\Program File
      +                          s\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  1827     0691  082C               	movf	sprintf@c,w
  1828     0692  00AA               	movwf	sprintf@prec
  1829                           
  1830                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1831     0693  2EC9               	goto	l1495
  1832     0694                     l1489:
  1833                           
  1834                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  1835     0694  300A               	movlw	10
  1836     0695  00F8               	movwf	___lwmod@divisor
  1837     0696  3000               	movlw	0
  1838     0697  00F9               	movwf	___lwmod@divisor+1
  1839     0698  082A               	movf	sprintf@prec,w
  1840     0699  00A3               	movwf	??_sprintf
  1841     069A  0723               	addwf	??_sprintf,w
  1842     069B  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1843     069C  0084               	movwf	4
  1844     069D  120A  118A  200D  120A  118A  	fcall	stringdir
  1845     06A2  00F0               	movwf	___lwdiv@divisor
  1846     06A3  120A  118A  200D  120A  118A  	fcall	stringdir
  1847     06A8  00F1               	movwf	___lwdiv@divisor+1
  1848     06A9  0829               	movf	sprintf@val+1,w
  1849     06AA  00F3               	movwf	___lwdiv@dividend+1
  1850     06AB  0828               	movf	sprintf@val,w
  1851     06AC  00F2               	movwf	___lwdiv@dividend
  1852     06AD  120A  118A  21F5  120A  118A  	fcall	___lwdiv
  1853     06B2  0871               	movf	?___lwdiv+1,w
  1854     06B3  00FB               	movwf	___lwmod@dividend+1
  1855     06B4  0870               	movf	?___lwdiv,w
  1856     06B5  00FA               	movwf	___lwmod@dividend
  1857     06B6  120A  118A  2179  120A  118A  	fcall	___lwmod
  1858     06BB  0878               	movf	?___lwmod,w
  1859     06BC  3E30               	addlw	48
  1860     06BD  1283               	bcf	3,5	;RP0=0, select bank0
  1861     06BE  1303               	bcf	3,6	;RP1=0, select bank0
  1862     06BF  00AC               	movwf	sprintf@c
  1863     06C0                     l1491:
  1864                           
  1865                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  1866     06C0  082B               	movf	sprintf@sp,w
  1867     06C1  0084               	movwf	4
  1868     06C2  082C               	movf	sprintf@c,w
  1869     06C3  1383               	bcf	3,7	;select IRP bank0
  1870     06C4  0080               	movwf	0
  1871     06C5                     l1493:
  1872     06C5  3001               	movlw	1
  1873     06C6  00A3               	movwf	??_sprintf
  1874     06C7  0823               	movf	??_sprintf,w
  1875     06C8  07AB               	addwf	sprintf@sp,f
  1876     06C9                     l1495:
  1877                           
  1878                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1879     06C9  30FF               	movlw	255
  1880     06CA  00A3               	movwf	??_sprintf
  1881     06CB  0823               	movf	??_sprintf,w
  1882     06CC  07AA               	addwf	sprintf@prec,f
  1883     06CD  0A2A               	incf	sprintf@prec,w
  1884     06CE  1D03               	btfss	3,2
  1885     06CF  2ED1               	goto	u1021
  1886     06D0  2ED2               	goto	u1020
  1887     06D1                     u1021:
  1888     06D1  2E94               	goto	l1489
  1889     06D2                     u1020:
  1890     06D2                     l1497:
  1891                           
  1892                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1893     06D2  3001               	movlw	1
  1894     06D3  07A0               	addwf	sprintf@f,f
  1895     06D4  30FF               	movlw	-1
  1896     06D5  0720               	addwf	sprintf@f,w
  1897     06D6  0084               	movwf	4
  1898     06D7  120A  118A  200D  120A  118A  	fcall	stringdir
  1899     06DC  00AC               	movwf	sprintf@c
  1900     06DD  082C               	movf	sprintf@c,w
  1901     06DE  1D03               	btfss	3,2
  1902     06DF  2EE1               	goto	u1031
  1903     06E0  2EE2               	goto	u1030
  1904     06E1                     u1031:
  1905     06E1  2E2C               	goto	l1457
  1906     06E2                     u1030:
  1907     06E2                     l1499:
  1908                           
  1909                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1910     06E2  082B               	movf	sprintf@sp,w
  1911     06E3  0084               	movwf	4
  1912     06E4  1383               	bcf	3,7	;select IRP bank0
  1913     06E5  0180               	clrf	0
  1914     06E6                     l343:
  1915     06E6  0008               	return
  1916     06E7                     __end_of_sprintf:
  1917                           
  1918                           	psect	text3
  1919     01B3                     __ptext3:	
  1920 ;; *************** function _Lcd_Write_String *****************
  1921 ;; Defined at:
  1922 ;;		line 104 in file "lcd.c"
  1923 ;; Parameters:    Size  Location     Type
  1924 ;;  a               2    5[COMMON] PTR const unsigned char 
  1925 ;;		 -> STR_6(2), STR_3(2), buffer(20), STR_1(17), 
  1926 ;; Auto vars:     Size  Location     Type
  1927 ;;  i               2   10[COMMON] int 
  1928 ;; Return value:  Size  Location     Type
  1929 ;;                  1    wreg      void 
  1930 ;; Registers used:
  1931 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1932 ;; Tracked objects:
  1933 ;;		On entry : 0/0
  1934 ;;		On exit  : 0/0
  1935 ;;		Unchanged: 0/0
  1936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1937 ;;      Params:         2       0       0       0       0
  1938 ;;      Locals:         2       0       0       0       0
  1939 ;;      Temps:          3       0       0       0       0
  1940 ;;      Totals:         7       0       0       0       0
  1941 ;;Total ram usage:        7 bytes
  1942 ;; Hardware stack levels used: 1
  1943 ;; Hardware stack levels required when called: 2
  1944 ;; This function calls:
  1945 ;;		_Lcd_Write_Char
  1946 ;; This function is called by:
  1947 ;;		_main
  1948 ;;		_valorLCD
  1949 ;; This function uses a non-reentrant model
  1950 ;;
  1951                           
  1952     01B3                     _Lcd_Write_String:	
  1953                           ;psect for function _Lcd_Write_String
  1954                           
  1955     01B3                     l1437:	
  1956                           ;incstack = 0
  1957                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1958                           
  1959                           
  1960                           ;lcd.c: 104: void Lcd_Write_String(const char *a);lcd.c: 105: {;lcd.c: 106:     int i;;l
      +                          cd.c: 107:     for(i=0;a[i]!='\0';i++)
  1961     01B3  01FA               	clrf	Lcd_Write_String@i
  1962     01B4  01FB               	clrf	Lcd_Write_String@i+1
  1963     01B5  29D8               	goto	l1443
  1964     01B6                     l1439:
  1965                           
  1966                           ;lcd.c: 108:         Lcd_Write_Char(a[i]);
  1967     01B6  087A               	movf	Lcd_Write_String@i,w
  1968     01B7  0775               	addwf	Lcd_Write_String@a,w
  1969     01B8  00F8               	movwf	??_Lcd_Write_String+1
  1970     01B9  0876               	movf	Lcd_Write_String@a+1,w
  1971     01BA  00F7               	movwf	??_Lcd_Write_String
  1972     01BB  1803               	skipnc
  1973     01BC  0AF7               	incf	??_Lcd_Write_String,f
  1974     01BD  1FFA               	btfss	Lcd_Write_String@i,7
  1975     01BE  29C0               	goto	u950
  1976     01BF  03F7               	decf	??_Lcd_Write_String,f
  1977     01C0                     u950:
  1978     01C0  0877               	movf	??_Lcd_Write_String,w
  1979     01C1  00F9               	movwf	??_Lcd_Write_String+2
  1980     01C2  0879               	movf	??_Lcd_Write_String+2,w
  1981     01C3  1283               	bcf	3,5	;RP0=0, select bank0
  1982     01C4  1303               	bcf	3,6	;RP1=0, select bank0
  1983     01C5  00FF               	movwf	btemp+1
  1984     01C6  0878               	movf	??_Lcd_Write_String+1,w
  1985     01C7  0084               	movwf	4
  1986     01C8  120A  118A  2003  120A  118A  	fcall	stringtab
  1987     01CD  120A  118A  2146  120A  118A  	fcall	_Lcd_Write_Char
  1988     01D2                     l1441:
  1989     01D2  3001               	movlw	1
  1990     01D3  07FA               	addwf	Lcd_Write_String@i,f
  1991     01D4  1803               	skipnc
  1992     01D5  0AFB               	incf	Lcd_Write_String@i+1,f
  1993     01D6  3000               	movlw	0
  1994     01D7  07FB               	addwf	Lcd_Write_String@i+1,f
  1995     01D8                     l1443:
  1996     01D8  087A               	movf	Lcd_Write_String@i,w
  1997     01D9  0775               	addwf	Lcd_Write_String@a,w
  1998     01DA  00F8               	movwf	??_Lcd_Write_String+1
  1999     01DB  0876               	movf	Lcd_Write_String@a+1,w
  2000     01DC  00F7               	movwf	??_Lcd_Write_String
  2001     01DD  1803               	skipnc
  2002     01DE  0AF7               	incf	??_Lcd_Write_String,f
  2003     01DF  1FFA               	btfss	Lcd_Write_String@i,7
  2004     01E0  29E2               	goto	u960
  2005     01E1  03F7               	decf	??_Lcd_Write_String,f
  2006     01E2                     u960:
  2007     01E2  0877               	movf	??_Lcd_Write_String,w
  2008     01E3  00F9               	movwf	??_Lcd_Write_String+2
  2009     01E4  0879               	movf	??_Lcd_Write_String+2,w
  2010     01E5  1283               	bcf	3,5	;RP0=0, select bank0
  2011     01E6  1303               	bcf	3,6	;RP1=0, select bank0
  2012     01E7  00FF               	movwf	btemp+1
  2013     01E8  0878               	movf	??_Lcd_Write_String+1,w
  2014     01E9  0084               	movwf	4
  2015     01EA  120A  118A  2003  120A  118A  	fcall	stringtab
  2016     01EF  3A00               	xorlw	0
  2017     01F0  1D03               	skipz
  2018     01F1  29F3               	goto	u971
  2019     01F2  29F4               	goto	u970
  2020     01F3                     u971:
  2021     01F3  29B6               	goto	l1439
  2022     01F4                     u970:
  2023     01F4                     l191:
  2024     01F4  0008               	return
  2025     01F5                     __end_of_Lcd_Write_String:
  2026                           
  2027                           	psect	text4
  2028     0146                     __ptext4:	
  2029 ;; *************** function _Lcd_Write_Char *****************
  2030 ;; Defined at:
  2031 ;;		line 88 in file "lcd.c"
  2032 ;; Parameters:    Size  Location     Type
  2033 ;;  a               1    wreg     unsigned char 
  2034 ;; Auto vars:     Size  Location     Type
  2035 ;;  a               1    4[COMMON] unsigned char 
  2036 ;;  y               1    3[COMMON] unsigned char 
  2037 ;;  temp            1    2[COMMON] unsigned char 
  2038 ;; Return value:  Size  Location     Type
  2039 ;;                  1    wreg      void 
  2040 ;; Registers used:
  2041 ;;		wreg, status,2, status,0, pclath, cstack
  2042 ;; Tracked objects:
  2043 ;;		On entry : 0/0
  2044 ;;		On exit  : 0/0
  2045 ;;		Unchanged: 0/0
  2046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2047 ;;      Params:         0       0       0       0       0
  2048 ;;      Locals:         3       0       0       0       0
  2049 ;;      Temps:          1       0       0       0       0
  2050 ;;      Totals:         4       0       0       0       0
  2051 ;;Total ram usage:        4 bytes
  2052 ;; Hardware stack levels used: 1
  2053 ;; Hardware stack levels required when called: 1
  2054 ;; This function calls:
  2055 ;;		_Lcd_Port
  2056 ;; This function is called by:
  2057 ;;		_Lcd_Write_String
  2058 ;; This function uses a non-reentrant model
  2059 ;;
  2060                           
  2061     0146                     _Lcd_Write_Char:	
  2062                           ;psect for function _Lcd_Write_Char
  2063                           
  2064                           
  2065                           ;incstack = 0
  2066                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  2067                           ;Lcd_Write_Char@a stored from wreg
  2068     0146  00F4               	movwf	Lcd_Write_Char@a
  2069     0147                     l1327:
  2070                           
  2071                           ;lcd.c: 88: void Lcd_Write_Char(char a);lcd.c: 89: {;lcd.c: 90:     char temp,y;;lcd.c: 
      +                          91:     temp = a&0x0F;
  2072     0147  0874               	movf	Lcd_Write_Char@a,w
  2073     0148  390F               	andlw	15
  2074     0149  00F2               	movwf	Lcd_Write_Char@temp
  2075                           
  2076                           ;lcd.c: 92:     y = a&0xF0;
  2077     014A  0874               	movf	Lcd_Write_Char@a,w
  2078     014B  39F0               	andlw	240
  2079     014C  00F3               	movwf	Lcd_Write_Char@y
  2080     014D                     l1329:
  2081                           
  2082                           ;lcd.c: 93:     PORTDbits.RD2 = 1;
  2083     014D  1283               	bcf	3,5	;RP0=0, select bank0
  2084     014E  1303               	bcf	3,6	;RP1=0, select bank0
  2085     014F  1508               	bsf	8,2	;volatile
  2086     0150                     l1331:
  2087                           
  2088                           ;lcd.c: 94:     Lcd_Port(y>>4);
  2089     0150  0873               	movf	Lcd_Write_Char@y,w
  2090     0151  00F1               	movwf	??_Lcd_Write_Char
  2091     0152  3004               	movlw	4
  2092     0153                     u735:
  2093     0153  1003               	clrc
  2094     0154  0CF1               	rrf	??_Lcd_Write_Char,f
  2095     0155  3EFF               	addlw	-1
  2096     0156  1D03               	skipz
  2097     0157  2953               	goto	u735
  2098     0158  0871               	movf	??_Lcd_Write_Char,w
  2099     0159  120A  118A  20FF  120A  118A  	fcall	_Lcd_Port
  2100     015E                     l1333:
  2101                           
  2102                           ;lcd.c: 95:     PORTDbits.RD3 = 1;
  2103     015E  1283               	bcf	3,5	;RP0=0, select bank0
  2104     015F  1303               	bcf	3,6	;RP1=0, select bank0
  2105     0160  1588               	bsf	8,3	;volatile
  2106     0161                     l1335:
  2107                           
  2108                           ;lcd.c: 96:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  2109     0161  300D               	movlw	13
  2110     0162  00F1               	movwf	??_Lcd_Write_Char
  2111     0163                     u1367:
  2112     0163  0BF1               	decfsz	??_Lcd_Write_Char,f
  2113     0164  2963               	goto	u1367
  2114     0165                     l1337:
  2115                           
  2116                           ;lcd.c: 97:     PORTDbits.RD3 = 0;
  2117     0165  1283               	bcf	3,5	;RP0=0, select bank0
  2118     0166  1303               	bcf	3,6	;RP1=0, select bank0
  2119     0167  1188               	bcf	8,3	;volatile
  2120     0168                     l1339:
  2121                           
  2122                           ;lcd.c: 98:     Lcd_Port(temp);
  2123     0168  0872               	movf	Lcd_Write_Char@temp,w
  2124     0169  120A  118A  20FF  120A  118A  	fcall	_Lcd_Port
  2125     016E                     l1341:
  2126                           
  2127                           ;lcd.c: 99:     PORTDbits.RD3 = 1;
  2128     016E  1283               	bcf	3,5	;RP0=0, select bank0
  2129     016F  1303               	bcf	3,6	;RP1=0, select bank0
  2130     0170  1588               	bsf	8,3	;volatile
  2131     0171                     l1343:
  2132                           
  2133                           ;lcd.c: 100:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  2134     0171  300D               	movlw	13
  2135     0172  00F1               	movwf	??_Lcd_Write_Char
  2136     0173                     u1377:
  2137     0173  0BF1               	decfsz	??_Lcd_Write_Char,f
  2138     0174  2973               	goto	u1377
  2139     0175                     l1345:
  2140                           
  2141                           ;lcd.c: 101:     PORTDbits.RD3 = 0;
  2142     0175  1283               	bcf	3,5	;RP0=0, select bank0
  2143     0176  1303               	bcf	3,6	;RP1=0, select bank0
  2144     0177  1188               	bcf	8,3	;volatile
  2145     0178                     l185:
  2146     0178  0008               	return
  2147     0179                     __end_of_Lcd_Write_Char:
  2148                           
  2149                           	psect	text5
  2150     0397                     __ptext5:	
  2151 ;; *************** function _Lcd_Set_Cursor *****************
  2152 ;; Defined at:
  2153 ;;		line 26 in file "lcd.c"
  2154 ;; Parameters:    Size  Location     Type
  2155 ;;  a               1    wreg     unsigned char 
  2156 ;;  b               1    4[COMMON] unsigned char 
  2157 ;; Auto vars:     Size  Location     Type
  2158 ;;  a               1    6[COMMON] unsigned char 
  2159 ;;  temp            1    9[COMMON] unsigned char 
  2160 ;;  y               1    8[COMMON] unsigned char 
  2161 ;;  z               1    7[COMMON] unsigned char 
  2162 ;; Return value:  Size  Location     Type
  2163 ;;                  1    wreg      void 
  2164 ;; Registers used:
  2165 ;;		wreg, status,2, status,0, pclath, cstack
  2166 ;; Tracked objects:
  2167 ;;		On entry : 0/0
  2168 ;;		On exit  : 0/0
  2169 ;;		Unchanged: 0/0
  2170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2171 ;;      Params:         1       0       0       0       0
  2172 ;;      Locals:         4       0       0       0       0
  2173 ;;      Temps:          1       0       0       0       0
  2174 ;;      Totals:         6       0       0       0       0
  2175 ;;Total ram usage:        6 bytes
  2176 ;; Hardware stack levels used: 1
  2177 ;; Hardware stack levels required when called: 2
  2178 ;; This function calls:
  2179 ;;		_Lcd_Cmd
  2180 ;; This function is called by:
  2181 ;;		_main
  2182 ;;		_valorLCD
  2183 ;; This function uses a non-reentrant model
  2184 ;;
  2185                           
  2186     0397                     _Lcd_Set_Cursor:	
  2187                           ;psect for function _Lcd_Set_Cursor
  2188                           
  2189                           
  2190                           ;incstack = 0
  2191                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  2192                           ;Lcd_Set_Cursor@a stored from wreg
  2193     0397  00F6               	movwf	Lcd_Set_Cursor@a
  2194     0398                     l1397:
  2195                           
  2196                           ;lcd.c: 26: void Lcd_Set_Cursor(char a, char b);lcd.c: 27: {;lcd.c: 28:     char temp,z,
      +                          y;;lcd.c: 29:     if(a == 1)
  2197     0398  0376               	decf	Lcd_Set_Cursor@a,w
  2198     0399  1D03               	btfss	3,2
  2199     039A  2B9C               	goto	u871
  2200     039B  2B9D               	goto	u870
  2201     039C                     u871:
  2202     039C  2BBA               	goto	l1407
  2203     039D                     u870:
  2204     039D                     l1399:
  2205                           
  2206                           ;lcd.c: 30:     {;lcd.c: 31:         temp = 0x80 + b - 1;
  2207     039D  0874               	movf	Lcd_Set_Cursor@b,w
  2208     039E  3E7F               	addlw	127
  2209     039F  00F9               	movwf	Lcd_Set_Cursor@temp
  2210                           
  2211                           ;lcd.c: 32:         z = temp>>4;
  2212     03A0  0879               	movf	Lcd_Set_Cursor@temp,w
  2213     03A1  00F5               	movwf	??_Lcd_Set_Cursor
  2214     03A2  3004               	movlw	4
  2215     03A3                     u885:
  2216     03A3  1003               	clrc
  2217     03A4  0CF5               	rrf	??_Lcd_Set_Cursor,f
  2218     03A5  3EFF               	addlw	-1
  2219     03A6  1D03               	skipz
  2220     03A7  2BA3               	goto	u885
  2221     03A8  0875               	movf	??_Lcd_Set_Cursor,w
  2222     03A9  00F7               	movwf	Lcd_Set_Cursor@z
  2223     03AA                     l1401:
  2224                           
  2225                           ;lcd.c: 33:         y = temp & 0x0F;
  2226     03AA  0879               	movf	Lcd_Set_Cursor@temp,w
  2227     03AB  390F               	andlw	15
  2228     03AC  00F8               	movwf	Lcd_Set_Cursor@y
  2229     03AD                     l1403:
  2230                           
  2231                           ;lcd.c: 34:         Lcd_Cmd(z);
  2232     03AD  0877               	movf	Lcd_Set_Cursor@z,w
  2233     03AE  120A  118A  20E5  120A  118A  	fcall	_Lcd_Cmd
  2234     03B3                     l1405:
  2235                           
  2236                           ;lcd.c: 35:         Lcd_Cmd(y);
  2237     03B3  0878               	movf	Lcd_Set_Cursor@y,w
  2238     03B4  120A  118A  20E5  120A  118A  	fcall	_Lcd_Cmd
  2239                           
  2240                           ;lcd.c: 36:     }
  2241     03B9  2C23               	goto	l179
  2242     03BA                     l1407:
  2243     03BA  3002               	movlw	2
  2244     03BB  0676               	xorwf	Lcd_Set_Cursor@a,w
  2245     03BC  1D03               	btfss	3,2
  2246     03BD  2BBF               	goto	u891
  2247     03BE  2BC0               	goto	u890
  2248     03BF                     u891:
  2249     03BF  2BDD               	goto	l1417
  2250     03C0                     u890:
  2251     03C0                     l1409:
  2252                           
  2253                           ;lcd.c: 38:     {;lcd.c: 39:         temp = 0xC0 + b - 1;
  2254     03C0  0874               	movf	Lcd_Set_Cursor@b,w
  2255     03C1  3EBF               	addlw	191
  2256     03C2  00F9               	movwf	Lcd_Set_Cursor@temp
  2257                           
  2258                           ;lcd.c: 40:         z = temp>>4;
  2259     03C3  0879               	movf	Lcd_Set_Cursor@temp,w
  2260     03C4  00F5               	movwf	??_Lcd_Set_Cursor
  2261     03C5  3004               	movlw	4
  2262     03C6                     u905:
  2263     03C6  1003               	clrc
  2264     03C7  0CF5               	rrf	??_Lcd_Set_Cursor,f
  2265     03C8  3EFF               	addlw	-1
  2266     03C9  1D03               	skipz
  2267     03CA  2BC6               	goto	u905
  2268     03CB  0875               	movf	??_Lcd_Set_Cursor,w
  2269     03CC  00F7               	movwf	Lcd_Set_Cursor@z
  2270     03CD                     l1411:
  2271                           
  2272                           ;lcd.c: 41:         y = temp & 0x0F;
  2273     03CD  0879               	movf	Lcd_Set_Cursor@temp,w
  2274     03CE  390F               	andlw	15
  2275     03CF  00F8               	movwf	Lcd_Set_Cursor@y
  2276     03D0                     l1413:
  2277                           
  2278                           ;lcd.c: 42:         Lcd_Cmd(z);
  2279     03D0  0877               	movf	Lcd_Set_Cursor@z,w
  2280     03D1  120A  118A  20E5  120A  118A  	fcall	_Lcd_Cmd
  2281     03D6                     l1415:
  2282                           
  2283                           ;lcd.c: 43:         Lcd_Cmd(y);
  2284     03D6  0878               	movf	Lcd_Set_Cursor@y,w
  2285     03D7  120A  118A  20E5  120A  118A  	fcall	_Lcd_Cmd
  2286                           
  2287                           ;lcd.c: 44:     }
  2288     03DC  2C23               	goto	l179
  2289     03DD                     l1417:
  2290     03DD  3003               	movlw	3
  2291     03DE  0676               	xorwf	Lcd_Set_Cursor@a,w
  2292     03DF  1D03               	btfss	3,2
  2293     03E0  2BE2               	goto	u911
  2294     03E1  2BE3               	goto	u910
  2295     03E2                     u911:
  2296     03E2  2C00               	goto	l1427
  2297     03E3                     u910:
  2298     03E3                     l1419:
  2299                           
  2300                           ;lcd.c: 46:     {;lcd.c: 47:         temp = 0x94 + b - 1;
  2301     03E3  0874               	movf	Lcd_Set_Cursor@b,w
  2302     03E4  3E93               	addlw	147
  2303     03E5  00F9               	movwf	Lcd_Set_Cursor@temp
  2304                           
  2305                           ;lcd.c: 48:         z = temp>>4;
  2306     03E6  0879               	movf	Lcd_Set_Cursor@temp,w
  2307     03E7  00F5               	movwf	??_Lcd_Set_Cursor
  2308     03E8  3004               	movlw	4
  2309     03E9                     u925:
  2310     03E9  1003               	clrc
  2311     03EA  0CF5               	rrf	??_Lcd_Set_Cursor,f
  2312     03EB  3EFF               	addlw	-1
  2313     03EC  1D03               	skipz
  2314     03ED  2BE9               	goto	u925
  2315     03EE  0875               	movf	??_Lcd_Set_Cursor,w
  2316     03EF  00F7               	movwf	Lcd_Set_Cursor@z
  2317     03F0                     l1421:
  2318                           
  2319                           ;lcd.c: 49:         y = temp & 0x0F;
  2320     03F0  0879               	movf	Lcd_Set_Cursor@temp,w
  2321     03F1  390F               	andlw	15
  2322     03F2  00F8               	movwf	Lcd_Set_Cursor@y
  2323     03F3                     l1423:
  2324                           
  2325                           ;lcd.c: 50:         Lcd_Cmd(z);
  2326     03F3  0877               	movf	Lcd_Set_Cursor@z,w
  2327     03F4  120A  118A  20E5  120A  118A  	fcall	_Lcd_Cmd
  2328     03F9                     l1425:
  2329                           
  2330                           ;lcd.c: 51:         Lcd_Cmd(y);
  2331     03F9  0878               	movf	Lcd_Set_Cursor@y,w
  2332     03FA  120A  118A  20E5  120A  118A  	fcall	_Lcd_Cmd
  2333                           
  2334                           ;lcd.c: 52:     }
  2335     03FF  2C23               	goto	l179
  2336     0400                     l1427:
  2337     0400  3004               	movlw	4
  2338     0401  0676               	xorwf	Lcd_Set_Cursor@a,w
  2339     0402  1D03               	btfss	3,2
  2340     0403  2C05               	goto	u931
  2341     0404  2C06               	goto	u930
  2342     0405                     u931:
  2343     0405  2C23               	goto	l175
  2344     0406                     u930:
  2345     0406                     l1429:
  2346                           
  2347                           ;lcd.c: 54:     {;lcd.c: 55:         temp = 0xD4 + b - 1;
  2348     0406  0874               	movf	Lcd_Set_Cursor@b,w
  2349     0407  3ED3               	addlw	211
  2350     0408  00F9               	movwf	Lcd_Set_Cursor@temp
  2351                           
  2352                           ;lcd.c: 56:         z = temp>>4;
  2353     0409  0879               	movf	Lcd_Set_Cursor@temp,w
  2354     040A  00F5               	movwf	??_Lcd_Set_Cursor
  2355     040B  3004               	movlw	4
  2356     040C                     u945:
  2357     040C  1003               	clrc
  2358     040D  0CF5               	rrf	??_Lcd_Set_Cursor,f
  2359     040E  3EFF               	addlw	-1
  2360     040F  1D03               	skipz
  2361     0410  2C0C               	goto	u945
  2362     0411  0875               	movf	??_Lcd_Set_Cursor,w
  2363     0412  00F7               	movwf	Lcd_Set_Cursor@z
  2364     0413                     l1431:
  2365                           
  2366                           ;lcd.c: 57:         y = temp & 0x0F;
  2367     0413  0879               	movf	Lcd_Set_Cursor@temp,w
  2368     0414  390F               	andlw	15
  2369     0415  00F8               	movwf	Lcd_Set_Cursor@y
  2370     0416                     l1433:
  2371                           
  2372                           ;lcd.c: 58:         Lcd_Cmd(z);
  2373     0416  0877               	movf	Lcd_Set_Cursor@z,w
  2374     0417  120A  118A  20E5  120A  118A  	fcall	_Lcd_Cmd
  2375     041C                     l1435:
  2376                           
  2377                           ;lcd.c: 59:         Lcd_Cmd(y);
  2378     041C  0878               	movf	Lcd_Set_Cursor@y,w
  2379     041D  120A  118A  20E5  120A  118A  	fcall	_Lcd_Cmd
  2380     0422  2C23               	goto	l179
  2381     0423                     l175:
  2382     0423                     l179:
  2383     0423  0008               	return
  2384     0424                     __end_of_Lcd_Set_Cursor:
  2385                           
  2386                           	psect	text6
  2387     00A4                     __ptext6:	
  2388 ;; *************** function _spiWrite *****************
  2389 ;; Defined at:
  2390 ;;		line 34 in file "SPI.c"
  2391 ;; Parameters:    Size  Location     Type
  2392 ;;  dat             1    wreg     unsigned char 
  2393 ;; Auto vars:     Size  Location     Type
  2394 ;;  dat             1    0[COMMON] unsigned char 
  2395 ;; Return value:  Size  Location     Type
  2396 ;;                  1    wreg      void 
  2397 ;; Registers used:
  2398 ;;		wreg
  2399 ;; Tracked objects:
  2400 ;;		On entry : 0/0
  2401 ;;		On exit  : 0/0
  2402 ;;		Unchanged: 0/0
  2403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2404 ;;      Params:         0       0       0       0       0
  2405 ;;      Locals:         1       0       0       0       0
  2406 ;;      Temps:          0       0       0       0       0
  2407 ;;      Totals:         1       0       0       0       0
  2408 ;;Total ram usage:        1 bytes
  2409 ;; Hardware stack levels used: 1
  2410 ;; This function calls:
  2411 ;;		Nothing
  2412 ;; This function is called by:
  2413 ;;		_main
  2414 ;; This function uses a non-reentrant model
  2415 ;;
  2416                           
  2417     00A4                     _spiWrite:	
  2418                           ;psect for function _spiWrite
  2419                           
  2420                           
  2421                           ;incstack = 0
  2422                           ; Regs used in _spiWrite: [wreg]
  2423                           ;spiWrite@dat stored from wreg
  2424     00A4  00F0               	movwf	spiWrite@dat
  2425     00A5                     l1609:
  2426                           
  2427                           ;SPI.c: 34: void spiWrite(char dat);SPI.c: 35: {;SPI.c: 36:     SSPBUF = dat;
  2428     00A5  0870               	movf	spiWrite@dat,w
  2429     00A6  1283               	bcf	3,5	;RP0=0, select bank0
  2430     00A7  1303               	bcf	3,6	;RP1=0, select bank0
  2431     00A8  0093               	movwf	19	;volatile
  2432     00A9                     l130:
  2433     00A9  0008               	return
  2434     00AA                     __end_of_spiWrite:
  2435                           
  2436                           	psect	text7
  2437     00B9                     __ptext7:	
  2438 ;; *************** function _spiRead *****************
  2439 ;; Defined at:
  2440 ;;		line 47 in file "SPI.c"
  2441 ;; Parameters:    Size  Location     Type
  2442 ;;		None
  2443 ;; Auto vars:     Size  Location     Type
  2444 ;;		None
  2445 ;; Return value:  Size  Location     Type
  2446 ;;                  1    wreg      unsigned char 
  2447 ;; Registers used:
  2448 ;;		wreg, status,2, status,0, pclath, cstack
  2449 ;; Tracked objects:
  2450 ;;		On entry : 0/0
  2451 ;;		On exit  : 0/0
  2452 ;;		Unchanged: 0/0
  2453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2454 ;;      Params:         0       0       0       0       0
  2455 ;;      Locals:         0       0       0       0       0
  2456 ;;      Temps:          0       0       0       0       0
  2457 ;;      Totals:         0       0       0       0       0
  2458 ;;Total ram usage:        0 bytes
  2459 ;; Hardware stack levels used: 1
  2460 ;; Hardware stack levels required when called: 1
  2461 ;; This function calls:
  2462 ;;		_spiReceiveWait
  2463 ;; This function is called by:
  2464 ;;		_main
  2465 ;; This function uses a non-reentrant model
  2466 ;;
  2467                           
  2468     00B9                     _spiRead:	
  2469                           ;psect for function _spiRead
  2470                           
  2471     00B9                     l1611:	
  2472                           ;incstack = 0
  2473                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
  2474                           
  2475                           
  2476                           ;SPI.c: 49:     spiReceiveWait();
  2477     00B9  120A  118A  20AA  120A  118A  	fcall	_spiReceiveWait
  2478     00BE                     l1613:
  2479                           
  2480                           ;SPI.c: 50:     return(SSPBUF);
  2481     00BE  1283               	bcf	3,5	;RP0=0, select bank0
  2482     00BF  1303               	bcf	3,6	;RP1=0, select bank0
  2483     00C0  0813               	movf	19,w	;volatile
  2484     00C1                     l138:
  2485     00C1  0008               	return
  2486     00C2                     __end_of_spiRead:
  2487                           
  2488                           	psect	text8
  2489     00AA                     __ptext8:	
  2490 ;; *************** function _spiReceiveWait *****************
  2491 ;; Defined at:
  2492 ;;		line 29 in file "SPI.c"
  2493 ;; Parameters:    Size  Location     Type
  2494 ;;		None
  2495 ;; Auto vars:     Size  Location     Type
  2496 ;;		None
  2497 ;; Return value:  Size  Location     Type
  2498 ;;                  1    wreg      void 
  2499 ;; Registers used:
  2500 ;;		None
  2501 ;; Tracked objects:
  2502 ;;		On entry : 0/0
  2503 ;;		On exit  : 0/0
  2504 ;;		Unchanged: 0/0
  2505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2506 ;;      Params:         0       0       0       0       0
  2507 ;;      Locals:         0       0       0       0       0
  2508 ;;      Temps:          0       0       0       0       0
  2509 ;;      Totals:         0       0       0       0       0
  2510 ;;Total ram usage:        0 bytes
  2511 ;; Hardware stack levels used: 1
  2512 ;; This function calls:
  2513 ;;		Nothing
  2514 ;; This function is called by:
  2515 ;;		_spiRead
  2516 ;; This function uses a non-reentrant model
  2517 ;;
  2518                           
  2519     00AA                     _spiReceiveWait:	
  2520                           ;psect for function _spiReceiveWait
  2521                           
  2522     00AA                     l1507:	
  2523                           ;incstack = 0
  2524                           ; Regs used in _spiReceiveWait: []
  2525                           
  2526     00AA                     l124:	
  2527                           ;SPI.c: 31:     while ( !SSPSTATbits.BF );
  2528                           
  2529     00AA  1683               	bsf	3,5	;RP0=1, select bank1
  2530     00AB  1303               	bcf	3,6	;RP1=0, select bank1
  2531     00AC  1C14               	btfss	20,0	;volatile
  2532     00AD  28AF               	goto	u1041
  2533     00AE  28B0               	goto	u1040
  2534     00AF                     u1041:
  2535     00AF  28AA               	goto	l124
  2536     00B0                     u1040:
  2537     00B0                     l127:
  2538     00B0  0008               	return
  2539     00B1                     __end_of_spiReceiveWait:
  2540                           
  2541                           	psect	text9
  2542     02CE                     __ptext9:	
  2543 ;; *************** function _setupINTOSC *****************
  2544 ;; Defined at:
  2545 ;;		line 10 in file "oscilador.c"
  2546 ;; Parameters:    Size  Location     Type
  2547 ;;  IRCF            1    wreg     unsigned char 
  2548 ;; Auto vars:     Size  Location     Type
  2549 ;;  IRCF            1    0[COMMON] unsigned char 
  2550 ;; Return value:  Size  Location     Type
  2551 ;;                  1    wreg      void 
  2552 ;; Registers used:
  2553 ;;		wreg, status,2, status,0
  2554 ;; Tracked objects:
  2555 ;;		On entry : 0/0
  2556 ;;		On exit  : 0/0
  2557 ;;		Unchanged: 0/0
  2558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2559 ;;      Params:         0       0       0       0       0
  2560 ;;      Locals:         1       0       0       0       0
  2561 ;;      Temps:          0       0       0       0       0
  2562 ;;      Totals:         1       0       0       0       0
  2563 ;;Total ram usage:        1 bytes
  2564 ;; Hardware stack levels used: 1
  2565 ;; This function calls:
  2566 ;;		Nothing
  2567 ;; This function is called by:
  2568 ;;		_main
  2569 ;; This function uses a non-reentrant model
  2570 ;;
  2571                           
  2572     02CE                     _setupINTOSC:	
  2573                           ;psect for function _setupINTOSC
  2574                           
  2575                           
  2576                           ;incstack = 0
  2577                           ; Regs used in _setupINTOSC: [wreg+status,2+status,0]
  2578                           ;setupINTOSC@IRCF stored from wreg
  2579     02CE  00F0               	movwf	setupINTOSC@IRCF
  2580     02CF                     l1563:
  2581                           
  2582                           ;oscilador.c: 11:     if (IRCF == 7){
  2583     02CF  3007               	movlw	7
  2584     02D0  0670               	xorwf	setupINTOSC@IRCF,w
  2585     02D1  1D03               	btfss	3,2
  2586     02D2  2AD4               	goto	u1201
  2587     02D3  2AD5               	goto	u1200
  2588     02D4                     u1201:
  2589     02D4  2AD9               	goto	l96
  2590     02D5                     u1200:
  2591     02D5                     l1565:
  2592                           
  2593                           ;oscilador.c: 12:         OSCCONbits.IRCF = 0b111;
  2594     02D5  3070               	movlw	112
  2595     02D6  1683               	bsf	3,5	;RP0=1, select bank1
  2596     02D7  1303               	bcf	3,6	;RP1=0, select bank1
  2597     02D8  048F               	iorwf	15,f	;volatile
  2598     02D9                     l96:	
  2599                           ;oscilador.c: 13:     }
  2600                           
  2601                           
  2602                           ;oscilador.c: 14:     if (IRCF == 6){
  2603     02D9  3006               	movlw	6
  2604     02DA  0670               	xorwf	setupINTOSC@IRCF,w
  2605     02DB  1D03               	btfss	3,2
  2606     02DC  2ADE               	goto	u1211
  2607     02DD  2ADF               	goto	u1210
  2608     02DE                     u1211:
  2609     02DE  2AE5               	goto	l97
  2610     02DF                     u1210:
  2611     02DF                     l1567:
  2612                           
  2613                           ;oscilador.c: 15:         OSCCONbits.IRCF = 0b110;
  2614     02DF  1683               	bsf	3,5	;RP0=1, select bank1
  2615     02E0  1303               	bcf	3,6	;RP1=0, select bank1
  2616     02E1  080F               	movf	15,w	;volatile
  2617     02E2  398F               	andlw	-113
  2618     02E3  3860               	iorlw	96
  2619     02E4  008F               	movwf	15	;volatile
  2620     02E5                     l97:	
  2621                           ;oscilador.c: 16:     }
  2622                           
  2623                           
  2624                           ;oscilador.c: 17:     if (IRCF == 5){
  2625     02E5  3005               	movlw	5
  2626     02E6  0670               	xorwf	setupINTOSC@IRCF,w
  2627     02E7  1D03               	btfss	3,2
  2628     02E8  2AEA               	goto	u1221
  2629     02E9  2AEB               	goto	u1220
  2630     02EA                     u1221:
  2631     02EA  2AF1               	goto	l98
  2632     02EB                     u1220:
  2633     02EB                     l1569:
  2634                           
  2635                           ;oscilador.c: 18:         OSCCONbits.IRCF = 0b101;
  2636     02EB  1683               	bsf	3,5	;RP0=1, select bank1
  2637     02EC  1303               	bcf	3,6	;RP1=0, select bank1
  2638     02ED  080F               	movf	15,w	;volatile
  2639     02EE  398F               	andlw	-113
  2640     02EF  3850               	iorlw	80
  2641     02F0  008F               	movwf	15	;volatile
  2642     02F1                     l98:	
  2643                           ;oscilador.c: 19:     }
  2644                           
  2645                           
  2646                           ;oscilador.c: 20:     if (IRCF == 4){
  2647     02F1  3004               	movlw	4
  2648     02F2  0670               	xorwf	setupINTOSC@IRCF,w
  2649     02F3  1D03               	btfss	3,2
  2650     02F4  2AF6               	goto	u1231
  2651     02F5  2AF7               	goto	u1230
  2652     02F6                     u1231:
  2653     02F6  2AFD               	goto	l99
  2654     02F7                     u1230:
  2655     02F7                     l1571:
  2656                           
  2657                           ;oscilador.c: 21:         OSCCONbits.IRCF = 0b100;
  2658     02F7  1683               	bsf	3,5	;RP0=1, select bank1
  2659     02F8  1303               	bcf	3,6	;RP1=0, select bank1
  2660     02F9  080F               	movf	15,w	;volatile
  2661     02FA  398F               	andlw	-113
  2662     02FB  3840               	iorlw	64
  2663     02FC  008F               	movwf	15	;volatile
  2664     02FD                     l99:	
  2665                           ;oscilador.c: 22:     }
  2666                           
  2667                           
  2668                           ;oscilador.c: 23:     if (IRCF == 3){
  2669     02FD  3003               	movlw	3
  2670     02FE  0670               	xorwf	setupINTOSC@IRCF,w
  2671     02FF  1D03               	btfss	3,2
  2672     0300  2B02               	goto	u1241
  2673     0301  2B03               	goto	u1240
  2674     0302                     u1241:
  2675     0302  2B09               	goto	l100
  2676     0303                     u1240:
  2677     0303                     l1573:
  2678                           
  2679                           ;oscilador.c: 24:         OSCCONbits.IRCF = 0b011;
  2680     0303  1683               	bsf	3,5	;RP0=1, select bank1
  2681     0304  1303               	bcf	3,6	;RP1=0, select bank1
  2682     0305  080F               	movf	15,w	;volatile
  2683     0306  398F               	andlw	-113
  2684     0307  3830               	iorlw	48
  2685     0308  008F               	movwf	15	;volatile
  2686     0309                     l100:	
  2687                           ;oscilador.c: 25:     }
  2688                           
  2689                           
  2690                           ;oscilador.c: 26:     if (IRCF == 2){
  2691     0309  3002               	movlw	2
  2692     030A  0670               	xorwf	setupINTOSC@IRCF,w
  2693     030B  1D03               	btfss	3,2
  2694     030C  2B0E               	goto	u1251
  2695     030D  2B0F               	goto	u1250
  2696     030E                     u1251:
  2697     030E  2B15               	goto	l101
  2698     030F                     u1250:
  2699     030F                     l1575:
  2700                           
  2701                           ;oscilador.c: 27:         OSCCONbits.IRCF = 0b010;
  2702     030F  1683               	bsf	3,5	;RP0=1, select bank1
  2703     0310  1303               	bcf	3,6	;RP1=0, select bank1
  2704     0311  080F               	movf	15,w	;volatile
  2705     0312  398F               	andlw	-113
  2706     0313  3820               	iorlw	32
  2707     0314  008F               	movwf	15	;volatile
  2708     0315                     l101:	
  2709                           ;oscilador.c: 28:     }
  2710                           
  2711                           
  2712                           ;oscilador.c: 29:     if (IRCF == 1){
  2713     0315  0370               	decf	setupINTOSC@IRCF,w
  2714     0316  1D03               	btfss	3,2
  2715     0317  2B19               	goto	u1261
  2716     0318  2B1A               	goto	u1260
  2717     0319                     u1261:
  2718     0319  2B20               	goto	l102
  2719     031A                     u1260:
  2720     031A                     l1577:
  2721                           
  2722                           ;oscilador.c: 30:         OSCCONbits.IRCF = 0b001;
  2723     031A  1683               	bsf	3,5	;RP0=1, select bank1
  2724     031B  1303               	bcf	3,6	;RP1=0, select bank1
  2725     031C  080F               	movf	15,w	;volatile
  2726     031D  398F               	andlw	-113
  2727     031E  3810               	iorlw	16
  2728     031F  008F               	movwf	15	;volatile
  2729     0320                     l102:	
  2730                           ;oscilador.c: 31:     }
  2731                           
  2732                           
  2733                           ;oscilador.c: 32:     if (IRCF == 0){
  2734     0320  0870               	movf	setupINTOSC@IRCF,w
  2735     0321  1D03               	btfss	3,2
  2736     0322  2B24               	goto	u1271
  2737     0323  2B25               	goto	u1270
  2738     0324                     u1271:
  2739     0324  2B29               	goto	l1581
  2740     0325                     u1270:
  2741     0325                     l1579:
  2742                           
  2743                           ;oscilador.c: 33:         OSCCONbits.IRCF = 0b000;
  2744     0325  308F               	movlw	-113
  2745     0326  1683               	bsf	3,5	;RP0=1, select bank1
  2746     0327  1303               	bcf	3,6	;RP1=0, select bank1
  2747     0328  058F               	andwf	15,f	;volatile
  2748     0329                     l1581:
  2749                           
  2750                           ;oscilador.c: 36:     OSCCONbits.SCS = 1;
  2751     0329  1683               	bsf	3,5	;RP0=1, select bank1
  2752     032A  1303               	bcf	3,6	;RP1=0, select bank1
  2753     032B  140F               	bsf	15,0	;volatile
  2754     032C                     l104:
  2755     032C  0008               	return
  2756     032D                     __end_of_setupINTOSC:
  2757                           
  2758                           	psect	text10
  2759     0121                     __ptext10:	
  2760 ;; *************** function _setup *****************
  2761 ;; Defined at:
  2762 ;;		line 118 in file "main.c"
  2763 ;; Parameters:    Size  Location     Type
  2764 ;;		None
  2765 ;; Auto vars:     Size  Location     Type
  2766 ;;		None
  2767 ;; Return value:  Size  Location     Type
  2768 ;;                  1    wreg      void 
  2769 ;; Registers used:
  2770 ;;		wreg, status,2, status,0, pclath, cstack
  2771 ;; Tracked objects:
  2772 ;;		On entry : 0/0
  2773 ;;		On exit  : 0/0
  2774 ;;		Unchanged: 0/0
  2775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2776 ;;      Params:         0       0       0       0       0
  2777 ;;      Locals:         0       0       0       0       0
  2778 ;;      Temps:          2       0       0       0       0
  2779 ;;      Totals:         2       0       0       0       0
  2780 ;;Total ram usage:        2 bytes
  2781 ;; Hardware stack levels used: 1
  2782 ;; Hardware stack levels required when called: 1
  2783 ;; This function calls:
  2784 ;;		_spiInit
  2785 ;; This function is called by:
  2786 ;;		_main
  2787 ;; This function uses a non-reentrant model
  2788 ;;
  2789                           
  2790     0121                     _setup:	
  2791                           ;psect for function _setup
  2792                           
  2793     0121                     l1583:	
  2794                           ;incstack = 0
  2795                           ; Regs used in _setup: [wreg+status,2+status,0+pclath+cstack]
  2796                           
  2797                           
  2798                           ;main.c: 120:     ANSELH = 0;
  2799     0121  1683               	bsf	3,5	;RP0=1, select bank3
  2800     0122  1703               	bsf	3,6	;RP1=1, select bank3
  2801     0123  0189               	clrf	9	;volatile
  2802                           
  2803                           ;main.c: 121:     TRISB = 0;
  2804     0124  1683               	bsf	3,5	;RP0=1, select bank1
  2805     0125  1303               	bcf	3,6	;RP1=0, select bank1
  2806     0126  0186               	clrf	6	;volatile
  2807                           
  2808                           ;main.c: 122:     TRISA = 0;
  2809     0127  0185               	clrf	5	;volatile
  2810     0128                     l1585:
  2811                           
  2812                           ;main.c: 123:     TRISCbits.TRISC1 = 0;
  2813     0128  1087               	bcf	7,1	;volatile
  2814     0129                     l1587:
  2815                           
  2816                           ;main.c: 124:     TRISCbits.TRISC2 = 0;
  2817     0129  1107               	bcf	7,2	;volatile
  2818                           
  2819                           ;main.c: 126:     TRISD = 0;
  2820     012A  0188               	clrf	8	;volatile
  2821                           
  2822                           ;main.c: 128:     PORTA = 0;
  2823     012B  1283               	bcf	3,5	;RP0=0, select bank0
  2824     012C  1303               	bcf	3,6	;RP1=0, select bank0
  2825     012D  0185               	clrf	5	;volatile
  2826                           
  2827                           ;main.c: 129:     PORTB = 0;
  2828     012E  0186               	clrf	6	;volatile
  2829                           
  2830                           ;main.c: 131:     PORTD = 0;
  2831     012F  0188               	clrf	8	;volatile
  2832                           
  2833                           ;main.c: 132:     PORTE = 0;
  2834     0130  0189               	clrf	9	;volatile
  2835     0131                     l1589:
  2836                           
  2837                           ;main.c: 134:     PORTCbits.RC1 = 1;
  2838     0131  1487               	bsf	7,1	;volatile
  2839     0132                     l1591:
  2840                           
  2841                           ;main.c: 135:     PORTCbits.RC2 = 1;
  2842     0132  1507               	bsf	7,2	;volatile
  2843     0133                     l1593:
  2844                           
  2845                           ;main.c: 136:     spiInit(SPI_MASTER_OSC_DIV4, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK_IDLE_LO
      +                          W, SPI_IDLE_2_ACTIVE);
  2846     0133  01F0               	clrf	spiInit@sDataSample
  2847     0134  01F1               	clrf	spiInit@sClockIdle
  2848     0135  01F2               	clrf	spiInit@sTransmitEdge
  2849     0136  3020               	movlw	32
  2850     0137  120A  118A  20CF  120A  118A  	fcall	_spiInit
  2851     013C                     l1595:
  2852                           
  2853                           ;main.c: 137:     _delay((unsigned long)((10)*(4000000/4000.0)));
  2854     013C  300D               	movlw	13
  2855     013D  00F5               	movwf	??_setup+1
  2856     013E  30FB               	movlw	251
  2857     013F  00F4               	movwf	??_setup
  2858     0140                     u1387:
  2859     0140  0BF4               	decfsz	??_setup,f
  2860     0141  2940               	goto	u1387
  2861     0142  0BF5               	decfsz	??_setup+1,f
  2862     0143  2940               	goto	u1387
  2863     0144  2945               	nop2
  2864     0145                     l85:
  2865     0145  0008               	return
  2866     0146                     __end_of_setup:
  2867                           
  2868                           	psect	text11
  2869     00CF                     __ptext11:	
  2870 ;; *************** function _spiInit *****************
  2871 ;; Defined at:
  2872 ;;		line 12 in file "SPI.c"
  2873 ;; Parameters:    Size  Location     Type
  2874 ;;  sType           1    wreg     enum E1292
  2875 ;;  sDataSample     1    0[COMMON] enum E1300
  2876 ;;  sClockIdle      1    1[COMMON] enum E1304
  2877 ;;  sTransmitEdg    1    2[COMMON] enum E1308
  2878 ;; Auto vars:     Size  Location     Type
  2879 ;;  sType           1    3[COMMON] enum E1292
  2880 ;; Return value:  Size  Location     Type
  2881 ;;                  1    wreg      void 
  2882 ;; Registers used:
  2883 ;;		wreg, status,2, status,0
  2884 ;; Tracked objects:
  2885 ;;		On entry : 0/0
  2886 ;;		On exit  : 0/0
  2887 ;;		Unchanged: 0/0
  2888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2889 ;;      Params:         3       0       0       0       0
  2890 ;;      Locals:         1       0       0       0       0
  2891 ;;      Temps:          0       0       0       0       0
  2892 ;;      Totals:         4       0       0       0       0
  2893 ;;Total ram usage:        4 bytes
  2894 ;; Hardware stack levels used: 1
  2895 ;; This function calls:
  2896 ;;		Nothing
  2897 ;; This function is called by:
  2898 ;;		_setup
  2899 ;; This function uses a non-reentrant model
  2900 ;;
  2901                           
  2902     00CF                     _spiInit:	
  2903                           ;psect for function _spiInit
  2904                           
  2905                           
  2906                           ;incstack = 0
  2907                           ; Regs used in _spiInit: [wreg+status,2+status,0]
  2908                           ;spiInit@sType stored from wreg
  2909     00CF  00F3               	movwf	spiInit@sType
  2910     00D0                     l1445:
  2911                           
  2912                           ;SPI.c: 12: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle sCl
      +                          ockIdle, Spi_Transmit_Edge sTransmitEdge);SPI.c: 13: {;SPI.c: 14:     TRISC5 = 0;
  2913     00D0  1683               	bsf	3,5	;RP0=1, select bank1
  2914     00D1  1303               	bcf	3,6	;RP1=0, select bank1
  2915     00D2  1287               	bcf	7,5	;volatile
  2916                           
  2917                           ;SPI.c: 15:     if(sType & 0b00000100)
  2918     00D3  1D73               	btfss	spiInit@sType,2
  2919     00D4  28D6               	goto	u981
  2920     00D5  28D7               	goto	u980
  2921     00D6                     u981:
  2922     00D6  28DB               	goto	l1451
  2923     00D7                     u980:
  2924     00D7                     l1447:
  2925                           
  2926                           ;SPI.c: 16:     {;SPI.c: 17:         SSPSTAT = sTransmitEdge;
  2927     00D7  0872               	movf	spiInit@sTransmitEdge,w
  2928     00D8  0094               	movwf	20	;volatile
  2929     00D9                     l1449:
  2930                           
  2931                           ;SPI.c: 18:         TRISC3 = 1;
  2932     00D9  1587               	bsf	7,3	;volatile
  2933                           
  2934                           ;SPI.c: 19:     }
  2935     00DA  28DF               	goto	l120
  2936     00DB                     l1451:
  2937                           
  2938                           ;SPI.c: 21:     {;SPI.c: 22:         SSPSTAT = sDataSample | sTransmitEdge;
  2939     00DB  0870               	movf	spiInit@sDataSample,w
  2940     00DC  0472               	iorwf	spiInit@sTransmitEdge,w
  2941     00DD  0094               	movwf	20	;volatile
  2942     00DE                     l1453:
  2943                           
  2944                           ;SPI.c: 23:         TRISC3 = 0;
  2945     00DE  1187               	bcf	7,3	;volatile
  2946     00DF                     l120:	
  2947                           ;SPI.c: 24:     }
  2948                           
  2949                           
  2950                           ;SPI.c: 26:     SSPCON = sType | sClockIdle;
  2951     00DF  0873               	movf	spiInit@sType,w
  2952     00E0  0471               	iorwf	spiInit@sClockIdle,w
  2953     00E1  1283               	bcf	3,5	;RP0=0, select bank0
  2954     00E2  1303               	bcf	3,6	;RP1=0, select bank0
  2955     00E3  0094               	movwf	20	;volatile
  2956     00E4                     l121:
  2957     00E4  0008               	return
  2958     00E5                     __end_of_spiInit:
  2959                           
  2960                           	psect	text12
  2961     04C1                     __ptext12:	
  2962 ;; *************** function _map *****************
  2963 ;; Defined at:
  2964 ;;		line 10 in file "mapf.c"
  2965 ;; Parameters:    Size  Location     Type
  2966 ;;  x               4   14[BANK0 ] long 
  2967 ;;  eMin            4   18[BANK0 ] long 
  2968 ;;  eMax            4   22[BANK0 ] long 
  2969 ;;  sMin            4   26[BANK0 ] long 
  2970 ;;  sMax            4   30[BANK0 ] long 
  2971 ;; Auto vars:     Size  Location     Type
  2972 ;;		None
  2973 ;; Return value:  Size  Location     Type
  2974 ;;                  4   14[BANK0 ] long 
  2975 ;; Registers used:
  2976 ;;		wreg, status,2, status,0, pclath, cstack
  2977 ;; Tracked objects:
  2978 ;;		On entry : 0/0
  2979 ;;		On exit  : 0/0
  2980 ;;		Unchanged: 0/0
  2981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2982 ;;      Params:         0      20       0       0       0
  2983 ;;      Locals:         0       0       0       0       0
  2984 ;;      Temps:          0      16       0       0       0
  2985 ;;      Totals:         0      36       0       0       0
  2986 ;;Total ram usage:       36 bytes
  2987 ;; Hardware stack levels used: 1
  2988 ;; Hardware stack levels required when called: 1
  2989 ;; This function calls:
  2990 ;;		___aldiv
  2991 ;;		___lmul
  2992 ;; This function is called by:
  2993 ;;		_main
  2994 ;; This function uses a non-reentrant model
  2995 ;;
  2996                           
  2997     04C1                     _map:	
  2998                           ;psect for function _map
  2999                           
  3000     04C1                     l1617:	
  3001                           ;incstack = 0
  3002                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
  3003                           
  3004                           
  3005                           ;mapf.c: 10: long map(long x, long eMin, long eMax, long sMin, long sMax);mapf.c: 11: {;
      +                          mapf.c: 12:   return(x -eMin)*(sMax-sMin)/(eMax-eMin)+sMin;
  3006     04C1  1283               	bcf	3,5	;RP0=0, select bank0
  3007     04C2  1303               	bcf	3,6	;RP1=0, select bank0
  3008     04C3  0836               	movf	map@eMax,w
  3009     04C4  00C2               	movwf	??_map
  3010     04C5  0837               	movf	map@eMax+1,w
  3011     04C6  00C3               	movwf	??_map+1
  3012     04C7  0838               	movf	map@eMax+2,w
  3013     04C8  00C4               	movwf	??_map+2
  3014     04C9  0839               	movf	map@eMax+3,w
  3015     04CA  00C5               	movwf	??_map+3
  3016     04CB  0832               	movf	map@eMin,w
  3017     04CC  02C2               	subwf	??_map,f
  3018     04CD  0833               	movf	map@eMin+1,w
  3019     04CE  1C03               	skipc
  3020     04CF  0F33               	incfsz	map@eMin+1,w
  3021     04D0  2CD2               	goto	u1281
  3022     04D1  2CD3               	goto	u1282
  3023     04D2                     u1281:
  3024     04D2  02C3               	subwf	??_map+1,f
  3025     04D3                     u1282:
  3026     04D3  0834               	movf	map@eMin+2,w
  3027     04D4  1C03               	skipc
  3028     04D5  0F34               	incfsz	map@eMin+2,w
  3029     04D6  2CD8               	goto	u1283
  3030     04D7  2CD9               	goto	u1284
  3031     04D8                     u1283:
  3032     04D8  02C4               	subwf	??_map+2,f
  3033     04D9                     u1284:
  3034     04D9  0835               	movf	map@eMin+3,w
  3035     04DA  1C03               	skipc
  3036     04DB  0F35               	incfsz	map@eMin+3,w
  3037     04DC  2CDE               	goto	u1285
  3038     04DD  2CDF               	goto	u1286
  3039     04DE                     u1285:
  3040     04DE  02C5               	subwf	??_map+3,f
  3041     04DF                     u1286:
  3042     04DF  0845               	movf	??_map+3,w
  3043     04E0  00A3               	movwf	___aldiv@divisor+3
  3044     04E1  0844               	movf	??_map+2,w
  3045     04E2  00A2               	movwf	___aldiv@divisor+2
  3046     04E3  0843               	movf	??_map+1,w
  3047     04E4  00A1               	movwf	___aldiv@divisor+1
  3048     04E5  0842               	movf	??_map,w
  3049     04E6  00A0               	movwf	___aldiv@divisor
  3050     04E7  082E               	movf	map@x,w
  3051     04E8  00C6               	movwf	??_map+4
  3052     04E9  082F               	movf	map@x+1,w
  3053     04EA  00C7               	movwf	??_map+5
  3054     04EB  0830               	movf	map@x+2,w
  3055     04EC  00C8               	movwf	??_map+6
  3056     04ED  0831               	movf	map@x+3,w
  3057     04EE  00C9               	movwf	??_map+7
  3058     04EF  0832               	movf	map@eMin,w
  3059     04F0  02C6               	subwf	??_map+4,f
  3060     04F1  0833               	movf	map@eMin+1,w
  3061     04F2  1C03               	skipc
  3062     04F3  0F33               	incfsz	map@eMin+1,w
  3063     04F4  2CF6               	goto	u1291
  3064     04F5  2CF7               	goto	u1292
  3065     04F6                     u1291:
  3066     04F6  02C7               	subwf	??_map+5,f
  3067     04F7                     u1292:
  3068     04F7  0834               	movf	map@eMin+2,w
  3069     04F8  1C03               	skipc
  3070     04F9  0F34               	incfsz	map@eMin+2,w
  3071     04FA  2CFC               	goto	u1293
  3072     04FB  2CFD               	goto	u1294
  3073     04FC                     u1293:
  3074     04FC  02C8               	subwf	??_map+6,f
  3075     04FD                     u1294:
  3076     04FD  0835               	movf	map@eMin+3,w
  3077     04FE  1C03               	skipc
  3078     04FF  0F35               	incfsz	map@eMin+3,w
  3079     0500  2D02               	goto	u1295
  3080     0501  2D03               	goto	u1296
  3081     0502                     u1295:
  3082     0502  02C9               	subwf	??_map+7,f
  3083     0503                     u1296:
  3084     0503  0849               	movf	??_map+7,w
  3085     0504  00F3               	movwf	___lmul@multiplier+3
  3086     0505  0848               	movf	??_map+6,w
  3087     0506  00F2               	movwf	___lmul@multiplier+2
  3088     0507  0847               	movf	??_map+5,w
  3089     0508  00F1               	movwf	___lmul@multiplier+1
  3090     0509  0846               	movf	??_map+4,w
  3091     050A  00F0               	movwf	___lmul@multiplier
  3092     050B  083E               	movf	map@sMax,w
  3093     050C  00CA               	movwf	??_map+8
  3094     050D  083F               	movf	map@sMax+1,w
  3095     050E  00CB               	movwf	??_map+9
  3096     050F  0840               	movf	map@sMax+2,w
  3097     0510  00CC               	movwf	??_map+10
  3098     0511  0841               	movf	map@sMax+3,w
  3099     0512  00CD               	movwf	??_map+11
  3100     0513  083A               	movf	map@sMin,w
  3101     0514  02CA               	subwf	??_map+8,f
  3102     0515  083B               	movf	map@sMin+1,w
  3103     0516  1C03               	skipc
  3104     0517  0F3B               	incfsz	map@sMin+1,w
  3105     0518  2D1A               	goto	u1301
  3106     0519  2D1B               	goto	u1302
  3107     051A                     u1301:
  3108     051A  02CB               	subwf	??_map+9,f
  3109     051B                     u1302:
  3110     051B  083C               	movf	map@sMin+2,w
  3111     051C  1C03               	skipc
  3112     051D  0F3C               	incfsz	map@sMin+2,w
  3113     051E  2D20               	goto	u1303
  3114     051F  2D21               	goto	u1304
  3115     0520                     u1303:
  3116     0520  02CC               	subwf	??_map+10,f
  3117     0521                     u1304:
  3118     0521  083D               	movf	map@sMin+3,w
  3119     0522  1C03               	skipc
  3120     0523  0F3D               	incfsz	map@sMin+3,w
  3121     0524  2D26               	goto	u1305
  3122     0525  2D27               	goto	u1306
  3123     0526                     u1305:
  3124     0526  02CD               	subwf	??_map+11,f
  3125     0527                     u1306:
  3126     0527  084D               	movf	??_map+11,w
  3127     0528  00F7               	movwf	___lmul@multiplicand+3
  3128     0529  084C               	movf	??_map+10,w
  3129     052A  00F6               	movwf	___lmul@multiplicand+2
  3130     052B  084B               	movf	??_map+9,w
  3131     052C  00F5               	movwf	___lmul@multiplicand+1
  3132     052D  084A               	movf	??_map+8,w
  3133     052E  00F4               	movwf	___lmul@multiplicand
  3134     052F  120A  118A  2239  120A  118A  	fcall	___lmul
  3135     0534  0873               	movf	?___lmul+3,w
  3136     0535  1283               	bcf	3,5	;RP0=0, select bank0
  3137     0536  1303               	bcf	3,6	;RP1=0, select bank0
  3138     0537  00A7               	movwf	___aldiv@dividend+3
  3139     0538  0872               	movf	?___lmul+2,w
  3140     0539  00A6               	movwf	___aldiv@dividend+2
  3141     053A  0871               	movf	?___lmul+1,w
  3142     053B  00A5               	movwf	___aldiv@dividend+1
  3143     053C  0870               	movf	?___lmul,w
  3144     053D  00A4               	movwf	___aldiv@dividend
  3145     053E  120A  118A  2424  120A  118A  	fcall	___aldiv
  3146     0543  1283               	bcf	3,5	;RP0=0, select bank0
  3147     0544  1303               	bcf	3,6	;RP1=0, select bank0
  3148     0545  0820               	movf	?___aldiv,w
  3149     0546  073A               	addwf	map@sMin,w
  3150     0547  00CE               	movwf	??_map+12
  3151     0548  3000               	movlw	0
  3152     0549  1803               	skipnc
  3153     054A  3001               	movlw	1
  3154     054B  0721               	addwf	?___aldiv+1,w
  3155     054C  01D0               	clrf	??_map+14
  3156     054D  1803               	skipnc
  3157     054E  0AD0               	incf	??_map+14,f
  3158     054F  073B               	addwf	map@sMin+1,w
  3159     0550  00CF               	movwf	??_map+13
  3160     0551  1803               	skipnc
  3161     0552  0AD0               	incf	??_map+14,f
  3162     0553  0822               	movf	?___aldiv+2,w
  3163     0554  0750               	addwf	??_map+14,w
  3164     0555  01D1               	clrf	??_map+15
  3165     0556  1803               	skipnc
  3166     0557  0AD1               	incf	??_map+15,f
  3167     0558  073C               	addwf	map@sMin+2,w
  3168     0559  00D0               	movwf	??_map+14
  3169     055A  1803               	skipnc
  3170     055B  0AD1               	incf	??_map+15,f
  3171     055C  0823               	movf	?___aldiv+3,w
  3172     055D  0751               	addwf	??_map+15,w
  3173     055E  073D               	addwf	map@sMin+3,w
  3174     055F  00D1               	movwf	??_map+15
  3175     0560  0851               	movf	??_map+15,w
  3176     0561  00B1               	movwf	?_map+3
  3177     0562  0850               	movf	??_map+14,w
  3178     0563  00B0               	movwf	?_map+2
  3179     0564  084F               	movf	??_map+13,w
  3180     0565  00AF               	movwf	?_map+1
  3181     0566  084E               	movf	??_map+12,w
  3182     0567  00AE               	movwf	?_map
  3183     0568                     l206:
  3184     0568  0008               	return
  3185     0569                     __end_of_map:
  3186                           
  3187                           	psect	text13
  3188     0239                     __ptext13:	
  3189 ;; *************** function ___lmul *****************
  3190 ;; Defined at:
  3191 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\Umul32.c"
  3192 ;; Parameters:    Size  Location     Type
  3193 ;;  multiplier      4    0[COMMON] unsigned long 
  3194 ;;  multiplicand    4    4[COMMON] unsigned long 
  3195 ;; Auto vars:     Size  Location     Type
  3196 ;;  product         4    9[COMMON] unsigned long 
  3197 ;; Return value:  Size  Location     Type
  3198 ;;                  4    0[COMMON] unsigned long 
  3199 ;; Registers used:
  3200 ;;		wreg, status,2, status,0
  3201 ;; Tracked objects:
  3202 ;;		On entry : 0/0
  3203 ;;		On exit  : 0/0
  3204 ;;		Unchanged: 0/0
  3205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3206 ;;      Params:         8       0       0       0       0
  3207 ;;      Locals:         4       0       0       0       0
  3208 ;;      Temps:          1       0       0       0       0
  3209 ;;      Totals:        13       0       0       0       0
  3210 ;;Total ram usage:       13 bytes
  3211 ;; Hardware stack levels used: 1
  3212 ;; This function calls:
  3213 ;;		Nothing
  3214 ;; This function is called by:
  3215 ;;		_map
  3216 ;; This function uses a non-reentrant model
  3217 ;;
  3218                           
  3219     0239                     ___lmul:	
  3220                           ;psect for function ___lmul
  3221                           
  3222     0239                     l1509:	
  3223                           ;incstack = 0
  3224                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3225                           
  3226     0239  3000               	movlw	0
  3227     023A  00FC               	movwf	___lmul@product+3
  3228     023B  3000               	movlw	0
  3229     023C  00FB               	movwf	___lmul@product+2
  3230     023D  3000               	movlw	0
  3231     023E  00FA               	movwf	___lmul@product+1
  3232     023F  3000               	movlw	0
  3233     0240  00F9               	movwf	___lmul@product
  3234     0241                     l1511:
  3235     0241  1C70               	btfss	___lmul@multiplier,0
  3236     0242  2A44               	goto	u1051
  3237     0243  2A45               	goto	u1050
  3238     0244                     u1051:
  3239     0244  2A5C               	goto	l1515
  3240     0245                     u1050:
  3241     0245                     l1513:
  3242     0245  0874               	movf	___lmul@multiplicand,w
  3243     0246  07F9               	addwf	___lmul@product,f
  3244     0247  0875               	movf	___lmul@multiplicand+1,w
  3245     0248  1103               	clrz
  3246     0249  1803               	skipnc
  3247     024A  3E01               	addlw	1
  3248     024B  1903               	skipnz
  3249     024C  2A4E               	goto	u1061
  3250     024D  07FA               	addwf	___lmul@product+1,f
  3251     024E                     u1061:
  3252     024E  0876               	movf	___lmul@multiplicand+2,w
  3253     024F  1103               	clrz
  3254     0250  1803               	skipnc
  3255     0251  3E01               	addlw	1
  3256     0252  1903               	skipnz
  3257     0253  2A55               	goto	u1062
  3258     0254  07FB               	addwf	___lmul@product+2,f
  3259     0255                     u1062:
  3260     0255  0877               	movf	___lmul@multiplicand+3,w
  3261     0256  1103               	clrz
  3262     0257  1803               	skipnc
  3263     0258  3E01               	addlw	1
  3264     0259  1903               	skipnz
  3265     025A  2A5C               	goto	u1063
  3266     025B  07FC               	addwf	___lmul@product+3,f
  3267     025C                     u1063:
  3268     025C                     l1515:
  3269     025C  3001               	movlw	1
  3270     025D  00F8               	movwf	??___lmul
  3271     025E                     u1075:
  3272     025E  1003               	clrc
  3273     025F  0DF4               	rlf	___lmul@multiplicand,f
  3274     0260  0DF5               	rlf	___lmul@multiplicand+1,f
  3275     0261  0DF6               	rlf	___lmul@multiplicand+2,f
  3276     0262  0DF7               	rlf	___lmul@multiplicand+3,f
  3277     0263  0BF8               	decfsz	??___lmul,f
  3278     0264  2A5E               	goto	u1075
  3279     0265                     l1517:
  3280     0265  3001               	movlw	1
  3281     0266                     u1085:
  3282     0266  1003               	clrc
  3283     0267  0CF3               	rrf	___lmul@multiplier+3,f
  3284     0268  0CF2               	rrf	___lmul@multiplier+2,f
  3285     0269  0CF1               	rrf	___lmul@multiplier+1,f
  3286     026A  0CF0               	rrf	___lmul@multiplier,f
  3287     026B  3EFF               	addlw	-1
  3288     026C  1D03               	skipz
  3289     026D  2A66               	goto	u1085
  3290     026E  0873               	movf	___lmul@multiplier+3,w
  3291     026F  0472               	iorwf	___lmul@multiplier+2,w
  3292     0270  0471               	iorwf	___lmul@multiplier+1,w
  3293     0271  0470               	iorwf	___lmul@multiplier,w
  3294     0272  1D03               	skipz
  3295     0273  2A75               	goto	u1091
  3296     0274  2A76               	goto	u1090
  3297     0275                     u1091:
  3298     0275  2A41               	goto	l1511
  3299     0276                     u1090:
  3300     0276                     l1519:
  3301     0276  087C               	movf	___lmul@product+3,w
  3302     0277  00F3               	movwf	?___lmul+3
  3303     0278  087B               	movf	___lmul@product+2,w
  3304     0279  00F2               	movwf	?___lmul+2
  3305     027A  087A               	movf	___lmul@product+1,w
  3306     027B  00F1               	movwf	?___lmul+1
  3307     027C  0879               	movf	___lmul@product,w
  3308     027D  00F0               	movwf	?___lmul
  3309     027E                     l361:
  3310     027E  0008               	return
  3311     027F                     __end_of___lmul:
  3312                           
  3313                           	psect	text14
  3314     0424                     __ptext14:	
  3315 ;; *************** function ___aldiv *****************
  3316 ;; Defined at:
  3317 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\aldiv.c"
  3318 ;; Parameters:    Size  Location     Type
  3319 ;;  divisor         4    0[BANK0 ] long 
  3320 ;;  dividend        4    4[BANK0 ] long 
  3321 ;; Auto vars:     Size  Location     Type
  3322 ;;  quotient        4   10[BANK0 ] long 
  3323 ;;  sign            1    9[BANK0 ] unsigned char 
  3324 ;;  counter         1    8[BANK0 ] unsigned char 
  3325 ;; Return value:  Size  Location     Type
  3326 ;;                  4    0[BANK0 ] long 
  3327 ;; Registers used:
  3328 ;;		wreg, status,2, status,0
  3329 ;; Tracked objects:
  3330 ;;		On entry : 0/0
  3331 ;;		On exit  : 0/0
  3332 ;;		Unchanged: 0/0
  3333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3334 ;;      Params:         0       8       0       0       0
  3335 ;;      Locals:         0       6       0       0       0
  3336 ;;      Temps:          1       0       0       0       0
  3337 ;;      Totals:         1      14       0       0       0
  3338 ;;Total ram usage:       15 bytes
  3339 ;; Hardware stack levels used: 1
  3340 ;; This function calls:
  3341 ;;		Nothing
  3342 ;; This function is called by:
  3343 ;;		_map
  3344 ;; This function uses a non-reentrant model
  3345 ;;
  3346                           
  3347     0424                     ___aldiv:	
  3348                           ;psect for function ___aldiv
  3349                           
  3350     0424                     l1523:	
  3351                           ;incstack = 0
  3352                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  3353                           
  3354     0424  1283               	bcf	3,5	;RP0=0, select bank0
  3355     0425  1303               	bcf	3,6	;RP1=0, select bank0
  3356     0426  01A9               	clrf	___aldiv@sign
  3357     0427                     l1525:
  3358     0427  1FA3               	btfss	___aldiv@divisor+3,7
  3359     0428  2C2A               	goto	u1101
  3360     0429  2C2B               	goto	u1100
  3361     042A                     u1101:
  3362     042A  2C38               	goto	l412
  3363     042B                     u1100:
  3364     042B                     l1527:
  3365     042B  09A0               	comf	___aldiv@divisor,f
  3366     042C  09A1               	comf	___aldiv@divisor+1,f
  3367     042D  09A2               	comf	___aldiv@divisor+2,f
  3368     042E  09A3               	comf	___aldiv@divisor+3,f
  3369     042F  0AA0               	incf	___aldiv@divisor,f
  3370     0430  1903               	skipnz
  3371     0431  0AA1               	incf	___aldiv@divisor+1,f
  3372     0432  1903               	skipnz
  3373     0433  0AA2               	incf	___aldiv@divisor+2,f
  3374     0434  1903               	skipnz
  3375     0435  0AA3               	incf	___aldiv@divisor+3,f
  3376     0436  01A9               	clrf	___aldiv@sign
  3377     0437  0AA9               	incf	___aldiv@sign,f
  3378     0438                     l412:
  3379     0438  1FA7               	btfss	___aldiv@dividend+3,7
  3380     0439  2C3B               	goto	u1111
  3381     043A  2C3C               	goto	u1110
  3382     043B                     u1111:
  3383     043B  2C4B               	goto	l1533
  3384     043C                     u1110:
  3385     043C                     l1529:
  3386     043C  09A4               	comf	___aldiv@dividend,f
  3387     043D  09A5               	comf	___aldiv@dividend+1,f
  3388     043E  09A6               	comf	___aldiv@dividend+2,f
  3389     043F  09A7               	comf	___aldiv@dividend+3,f
  3390     0440  0AA4               	incf	___aldiv@dividend,f
  3391     0441  1903               	skipnz
  3392     0442  0AA5               	incf	___aldiv@dividend+1,f
  3393     0443  1903               	skipnz
  3394     0444  0AA6               	incf	___aldiv@dividend+2,f
  3395     0445  1903               	skipnz
  3396     0446  0AA7               	incf	___aldiv@dividend+3,f
  3397     0447                     l1531:
  3398     0447  3001               	movlw	1
  3399     0448  00FD               	movwf	??___aldiv
  3400     0449  087D               	movf	??___aldiv,w
  3401     044A  06A9               	xorwf	___aldiv@sign,f
  3402     044B                     l1533:
  3403     044B  3000               	movlw	0
  3404     044C  00AD               	movwf	___aldiv@quotient+3
  3405     044D  3000               	movlw	0
  3406     044E  00AC               	movwf	___aldiv@quotient+2
  3407     044F  3000               	movlw	0
  3408     0450  00AB               	movwf	___aldiv@quotient+1
  3409     0451  3000               	movlw	0
  3410     0452  00AA               	movwf	___aldiv@quotient
  3411     0453                     l1535:
  3412     0453  0823               	movf	___aldiv@divisor+3,w
  3413     0454  0422               	iorwf	___aldiv@divisor+2,w
  3414     0455  0421               	iorwf	___aldiv@divisor+1,w
  3415     0456  0420               	iorwf	___aldiv@divisor,w
  3416     0457  1903               	skipnz
  3417     0458  2C5A               	goto	u1121
  3418     0459  2C5B               	goto	u1120
  3419     045A                     u1121:
  3420     045A  2CA8               	goto	l1555
  3421     045B                     u1120:
  3422     045B                     l1537:
  3423     045B  01A8               	clrf	___aldiv@counter
  3424     045C  0AA8               	incf	___aldiv@counter,f
  3425     045D  2C6B               	goto	l1541
  3426     045E                     l1539:
  3427     045E  3001               	movlw	1
  3428     045F  00FD               	movwf	??___aldiv
  3429     0460                     u1135:
  3430     0460  1003               	clrc
  3431     0461  0DA0               	rlf	___aldiv@divisor,f
  3432     0462  0DA1               	rlf	___aldiv@divisor+1,f
  3433     0463  0DA2               	rlf	___aldiv@divisor+2,f
  3434     0464  0DA3               	rlf	___aldiv@divisor+3,f
  3435     0465  0BFD               	decfsz	??___aldiv,f
  3436     0466  2C60               	goto	u1135
  3437     0467  3001               	movlw	1
  3438     0468  00FD               	movwf	??___aldiv
  3439     0469  087D               	movf	??___aldiv,w
  3440     046A  07A8               	addwf	___aldiv@counter,f
  3441     046B                     l1541:
  3442     046B  1FA3               	btfss	___aldiv@divisor+3,7
  3443     046C  2C6E               	goto	u1141
  3444     046D  2C6F               	goto	u1140
  3445     046E                     u1141:
  3446     046E  2C5E               	goto	l1539
  3447     046F                     u1140:
  3448     046F                     l1543:
  3449     046F  3001               	movlw	1
  3450     0470  00FD               	movwf	??___aldiv
  3451     0471                     u1155:
  3452     0471  1003               	clrc
  3453     0472  0DAA               	rlf	___aldiv@quotient,f
  3454     0473  0DAB               	rlf	___aldiv@quotient+1,f
  3455     0474  0DAC               	rlf	___aldiv@quotient+2,f
  3456     0475  0DAD               	rlf	___aldiv@quotient+3,f
  3457     0476  0BFD               	decfsz	??___aldiv,f
  3458     0477  2C71               	goto	u1155
  3459     0478                     l1545:
  3460     0478  0823               	movf	___aldiv@divisor+3,w
  3461     0479  0227               	subwf	___aldiv@dividend+3,w
  3462     047A  1D03               	skipz
  3463     047B  2C86               	goto	u1165
  3464     047C  0822               	movf	___aldiv@divisor+2,w
  3465     047D  0226               	subwf	___aldiv@dividend+2,w
  3466     047E  1D03               	skipz
  3467     047F  2C86               	goto	u1165
  3468     0480  0821               	movf	___aldiv@divisor+1,w
  3469     0481  0225               	subwf	___aldiv@dividend+1,w
  3470     0482  1D03               	skipz
  3471     0483  2C86               	goto	u1165
  3472     0484  0820               	movf	___aldiv@divisor,w
  3473     0485  0224               	subwf	___aldiv@dividend,w
  3474     0486                     u1165:
  3475     0486  1C03               	skipc
  3476     0487  2C89               	goto	u1161
  3477     0488  2C8A               	goto	u1160
  3478     0489                     u1161:
  3479     0489  2C99               	goto	l1551
  3480     048A                     u1160:
  3481     048A                     l1547:
  3482     048A  0820               	movf	___aldiv@divisor,w
  3483     048B  02A4               	subwf	___aldiv@dividend,f
  3484     048C  0821               	movf	___aldiv@divisor+1,w
  3485     048D  1C03               	skipc
  3486     048E  0F21               	incfsz	___aldiv@divisor+1,w
  3487     048F  02A5               	subwf	___aldiv@dividend+1,f
  3488     0490  0822               	movf	___aldiv@divisor+2,w
  3489     0491  1C03               	skipc
  3490     0492  0F22               	incfsz	___aldiv@divisor+2,w
  3491     0493  02A6               	subwf	___aldiv@dividend+2,f
  3492     0494  0823               	movf	___aldiv@divisor+3,w
  3493     0495  1C03               	skipc
  3494     0496  0F23               	incfsz	___aldiv@divisor+3,w
  3495     0497  02A7               	subwf	___aldiv@dividend+3,f
  3496     0498                     l1549:
  3497     0498  142A               	bsf	___aldiv@quotient,0
  3498     0499                     l1551:
  3499     0499  3001               	movlw	1
  3500     049A                     u1175:
  3501     049A  1003               	clrc
  3502     049B  0CA3               	rrf	___aldiv@divisor+3,f
  3503     049C  0CA2               	rrf	___aldiv@divisor+2,f
  3504     049D  0CA1               	rrf	___aldiv@divisor+1,f
  3505     049E  0CA0               	rrf	___aldiv@divisor,f
  3506     049F  3EFF               	addlw	-1
  3507     04A0  1D03               	skipz
  3508     04A1  2C9A               	goto	u1175
  3509     04A2                     l1553:
  3510     04A2  3001               	movlw	1
  3511     04A3  02A8               	subwf	___aldiv@counter,f
  3512     04A4  1D03               	btfss	3,2
  3513     04A5  2CA7               	goto	u1181
  3514     04A6  2CA8               	goto	u1180
  3515     04A7                     u1181:
  3516     04A7  2C6F               	goto	l1543
  3517     04A8                     u1180:
  3518     04A8                     l1555:
  3519     04A8  0829               	movf	___aldiv@sign,w
  3520     04A9  1903               	btfsc	3,2
  3521     04AA  2CAC               	goto	u1191
  3522     04AB  2CAD               	goto	u1190
  3523     04AC                     u1191:
  3524     04AC  2CB8               	goto	l1559
  3525     04AD                     u1190:
  3526     04AD                     l1557:
  3527     04AD  09AA               	comf	___aldiv@quotient,f
  3528     04AE  09AB               	comf	___aldiv@quotient+1,f
  3529     04AF  09AC               	comf	___aldiv@quotient+2,f
  3530     04B0  09AD               	comf	___aldiv@quotient+3,f
  3531     04B1  0AAA               	incf	___aldiv@quotient,f
  3532     04B2  1903               	skipnz
  3533     04B3  0AAB               	incf	___aldiv@quotient+1,f
  3534     04B4  1903               	skipnz
  3535     04B5  0AAC               	incf	___aldiv@quotient+2,f
  3536     04B6  1903               	skipnz
  3537     04B7  0AAD               	incf	___aldiv@quotient+3,f
  3538     04B8                     l1559:
  3539     04B8  082D               	movf	___aldiv@quotient+3,w
  3540     04B9  00A3               	movwf	?___aldiv+3
  3541     04BA  082C               	movf	___aldiv@quotient+2,w
  3542     04BB  00A2               	movwf	?___aldiv+2
  3543     04BC  082B               	movf	___aldiv@quotient+1,w
  3544     04BD  00A1               	movwf	?___aldiv+1
  3545     04BE  082A               	movf	___aldiv@quotient,w
  3546     04BF  00A0               	movwf	?___aldiv
  3547     04C0                     l422:
  3548     04C0  0008               	return
  3549     04C1                     __end_of___aldiv:
  3550                           
  3551                           	psect	text15
  3552     027F                     __ptext15:	
  3553 ;; *************** function _calculovolt *****************
  3554 ;; Defined at:
  3555 ;;		line 171 in file "main.c"
  3556 ;; Parameters:    Size  Location     Type
  3557 ;;		None
  3558 ;; Auto vars:     Size  Location     Type
  3559 ;;		None
  3560 ;; Return value:  Size  Location     Type
  3561 ;;                  1    wreg      void 
  3562 ;; Registers used:
  3563 ;;		wreg, status,2, status,0, pclath, cstack
  3564 ;; Tracked objects:
  3565 ;;		On entry : 0/0
  3566 ;;		On exit  : 0/0
  3567 ;;		Unchanged: 0/0
  3568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3569 ;;      Params:         0       0       0       0       0
  3570 ;;      Locals:         0       0       0       0       0
  3571 ;;      Temps:          0       0       0       0       0
  3572 ;;      Totals:         0       0       0       0       0
  3573 ;;Total ram usage:        0 bytes
  3574 ;; Hardware stack levels used: 1
  3575 ;; Hardware stack levels required when called: 1
  3576 ;; This function calls:
  3577 ;;		___lwdiv
  3578 ;;		___lwmod
  3579 ;; This function is called by:
  3580 ;;		_main
  3581 ;; This function uses a non-reentrant model
  3582 ;;
  3583                           
  3584     027F                     _calculovolt:	
  3585                           ;psect for function _calculovolt
  3586                           
  3587     027F                     l1621:	
  3588                           ;incstack = 0
  3589                           ; Regs used in _calculovolt: [wreg+status,2+status,0+pclath+cstack]
  3590                           
  3591                           
  3592                           ;main.c: 172:     u1 = VOLT1/40;
  3593     027F  3028               	movlw	40
  3594     0280  00F0               	movwf	___lwdiv@divisor
  3595     0281  3000               	movlw	0
  3596     0282  00F1               	movwf	___lwdiv@divisor+1
  3597     0283  1283               	bcf	3,5	;RP0=0, select bank0
  3598     0284  1303               	bcf	3,6	;RP1=0, select bank0
  3599     0285  086C               	movf	_VOLT1+1,w
  3600     0286  00F3               	movwf	___lwdiv@dividend+1
  3601     0287  086B               	movf	_VOLT1,w
  3602     0288  00F2               	movwf	___lwdiv@dividend
  3603     0289  120A  118A  21F5  120A  118A  	fcall	___lwdiv
  3604     028E  0871               	movf	?___lwdiv+1,w
  3605     028F  1283               	bcf	3,5	;RP0=0, select bank0
  3606     0290  1303               	bcf	3,6	;RP1=0, select bank0
  3607     0291  00E8               	movwf	_u1+1
  3608     0292  0870               	movf	?___lwdiv,w
  3609     0293  00E7               	movwf	_u1
  3610                           
  3611                           ;main.c: 173:     d1 = VOLT1%40;
  3612     0294  3028               	movlw	40
  3613     0295  00F8               	movwf	___lwmod@divisor
  3614     0296  3000               	movlw	0
  3615     0297  00F9               	movwf	___lwmod@divisor+1
  3616     0298  086C               	movf	_VOLT1+1,w
  3617     0299  00FB               	movwf	___lwmod@dividend+1
  3618     029A  086B               	movf	_VOLT1,w
  3619     029B  00FA               	movwf	___lwmod@dividend
  3620     029C  120A  118A  2179  120A  118A  	fcall	___lwmod
  3621     02A1  0879               	movf	?___lwmod+1,w
  3622     02A2  1283               	bcf	3,5	;RP0=0, select bank0
  3623     02A3  1303               	bcf	3,6	;RP1=0, select bank0
  3624     02A4  00E6               	movwf	_d1+1
  3625     02A5  0878               	movf	?___lwmod,w
  3626     02A6  00E5               	movwf	_d1
  3627                           
  3628                           ;main.c: 174:     u2 = VOLT2/40;
  3629     02A7  3028               	movlw	40
  3630     02A8  00F0               	movwf	___lwdiv@divisor
  3631     02A9  3000               	movlw	0
  3632     02AA  00F1               	movwf	___lwdiv@divisor+1
  3633     02AB  086A               	movf	_VOLT2+1,w
  3634     02AC  00F3               	movwf	___lwdiv@dividend+1
  3635     02AD  0869               	movf	_VOLT2,w
  3636     02AE  00F2               	movwf	___lwdiv@dividend
  3637     02AF  120A  118A  21F5  120A  118A  	fcall	___lwdiv
  3638     02B4  0871               	movf	?___lwdiv+1,w
  3639     02B5  1283               	bcf	3,5	;RP0=0, select bank0
  3640     02B6  1303               	bcf	3,6	;RP1=0, select bank0
  3641     02B7  00E4               	movwf	_u2+1
  3642     02B8  0870               	movf	?___lwdiv,w
  3643     02B9  00E3               	movwf	_u2
  3644                           
  3645                           ;main.c: 175:     d2 = VOLT2%40;
  3646     02BA  3028               	movlw	40
  3647     02BB  00F8               	movwf	___lwmod@divisor
  3648     02BC  3000               	movlw	0
  3649     02BD  00F9               	movwf	___lwmod@divisor+1
  3650     02BE  086A               	movf	_VOLT2+1,w
  3651     02BF  00FB               	movwf	___lwmod@dividend+1
  3652     02C0  0869               	movf	_VOLT2,w
  3653     02C1  00FA               	movwf	___lwmod@dividend
  3654     02C2  120A  118A  2179  120A  118A  	fcall	___lwmod
  3655     02C7  0879               	movf	?___lwmod+1,w
  3656     02C8  1283               	bcf	3,5	;RP0=0, select bank0
  3657     02C9  1303               	bcf	3,6	;RP1=0, select bank0
  3658     02CA  00E2               	movwf	_d2+1
  3659     02CB  0878               	movf	?___lwmod,w
  3660     02CC  00E1               	movwf	_d2
  3661     02CD                     l91:
  3662     02CD  0008               	return
  3663     02CE                     __end_of_calculovolt:
  3664                           
  3665                           	psect	text16
  3666     0179                     __ptext16:	
  3667 ;; *************** function ___lwmod *****************
  3668 ;; Defined at:
  3669 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lwmod.c"
  3670 ;; Parameters:    Size  Location     Type
  3671 ;;  divisor         2    8[COMMON] unsigned int 
  3672 ;;  dividend        2   10[COMMON] unsigned int 
  3673 ;; Auto vars:     Size  Location     Type
  3674 ;;  counter         1   13[COMMON] unsigned char 
  3675 ;; Return value:  Size  Location     Type
  3676 ;;                  2    8[COMMON] unsigned int 
  3677 ;; Registers used:
  3678 ;;		wreg, status,2, status,0
  3679 ;; Tracked objects:
  3680 ;;		On entry : 0/0
  3681 ;;		On exit  : 0/0
  3682 ;;		Unchanged: 0/0
  3683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3684 ;;      Params:         4       0       0       0       0
  3685 ;;      Locals:         1       0       0       0       0
  3686 ;;      Temps:          1       0       0       0       0
  3687 ;;      Totals:         6       0       0       0       0
  3688 ;;Total ram usage:        6 bytes
  3689 ;; Hardware stack levels used: 1
  3690 ;; This function calls:
  3691 ;;		Nothing
  3692 ;; This function is called by:
  3693 ;;		_calculovolt
  3694 ;;		_sprintf
  3695 ;; This function uses a non-reentrant model
  3696 ;;
  3697                           
  3698     0179                     ___lwmod:	
  3699                           ;psect for function ___lwmod
  3700                           
  3701     0179                     l1373:	
  3702                           ;incstack = 0
  3703                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  3704                           
  3705     0179  0878               	movf	___lwmod@divisor,w
  3706     017A  0479               	iorwf	___lwmod@divisor+1,w
  3707     017B  1903               	btfsc	3,2
  3708     017C  297E               	goto	u811
  3709     017D  297F               	goto	u810
  3710     017E                     u811:
  3711     017E  29AE               	goto	l1391
  3712     017F                     u810:
  3713     017F                     l1375:
  3714     017F  01FD               	clrf	___lwmod@counter
  3715     0180  0AFD               	incf	___lwmod@counter,f
  3716     0181  298D               	goto	l1381
  3717     0182                     l1377:
  3718     0182  3001               	movlw	1
  3719     0183                     u825:
  3720     0183  1003               	clrc
  3721     0184  0DF8               	rlf	___lwmod@divisor,f
  3722     0185  0DF9               	rlf	___lwmod@divisor+1,f
  3723     0186  3EFF               	addlw	-1
  3724     0187  1D03               	skipz
  3725     0188  2983               	goto	u825
  3726     0189                     l1379:
  3727     0189  3001               	movlw	1
  3728     018A  00FC               	movwf	??___lwmod
  3729     018B  087C               	movf	??___lwmod,w
  3730     018C  07FD               	addwf	___lwmod@counter,f
  3731     018D                     l1381:
  3732     018D  1FF9               	btfss	___lwmod@divisor+1,7
  3733     018E  2990               	goto	u831
  3734     018F  2991               	goto	u830
  3735     0190                     u831:
  3736     0190  2982               	goto	l1377
  3737     0191                     u830:
  3738     0191                     l1383:
  3739     0191  0879               	movf	___lwmod@divisor+1,w
  3740     0192  027B               	subwf	___lwmod@dividend+1,w
  3741     0193  1D03               	skipz
  3742     0194  2997               	goto	u845
  3743     0195  0878               	movf	___lwmod@divisor,w
  3744     0196  027A               	subwf	___lwmod@dividend,w
  3745     0197                     u845:
  3746     0197  1C03               	skipc
  3747     0198  299A               	goto	u841
  3748     0199  299B               	goto	u840
  3749     019A                     u841:
  3750     019A  29A1               	goto	l1387
  3751     019B                     u840:
  3752     019B                     l1385:
  3753     019B  0878               	movf	___lwmod@divisor,w
  3754     019C  02FA               	subwf	___lwmod@dividend,f
  3755     019D  0879               	movf	___lwmod@divisor+1,w
  3756     019E  1C03               	skipc
  3757     019F  03FB               	decf	___lwmod@dividend+1,f
  3758     01A0  02FB               	subwf	___lwmod@dividend+1,f
  3759     01A1                     l1387:
  3760     01A1  3001               	movlw	1
  3761     01A2                     u855:
  3762     01A2  1003               	clrc
  3763     01A3  0CF9               	rrf	___lwmod@divisor+1,f
  3764     01A4  0CF8               	rrf	___lwmod@divisor,f
  3765     01A5  3EFF               	addlw	-1
  3766     01A6  1D03               	skipz
  3767     01A7  29A2               	goto	u855
  3768     01A8                     l1389:
  3769     01A8  3001               	movlw	1
  3770     01A9  02FD               	subwf	___lwmod@counter,f
  3771     01AA  1D03               	btfss	3,2
  3772     01AB  29AD               	goto	u861
  3773     01AC  29AE               	goto	u860
  3774     01AD                     u861:
  3775     01AD  2991               	goto	l1383
  3776     01AE                     u860:
  3777     01AE                     l1391:
  3778     01AE  087B               	movf	___lwmod@dividend+1,w
  3779     01AF  00F9               	movwf	?___lwmod+1
  3780     01B0  087A               	movf	___lwmod@dividend,w
  3781     01B1  00F8               	movwf	?___lwmod
  3782     01B2                     l629:
  3783     01B2  0008               	return
  3784     01B3                     __end_of___lwmod:
  3785                           
  3786                           	psect	text17
  3787     01F5                     __ptext17:	
  3788 ;; *************** function ___lwdiv *****************
  3789 ;; Defined at:
  3790 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lwdiv.c"
  3791 ;; Parameters:    Size  Location     Type
  3792 ;;  divisor         2    0[COMMON] unsigned int 
  3793 ;;  dividend        2    2[COMMON] unsigned int 
  3794 ;; Auto vars:     Size  Location     Type
  3795 ;;  quotient        2    5[COMMON] unsigned int 
  3796 ;;  counter         1    7[COMMON] unsigned char 
  3797 ;; Return value:  Size  Location     Type
  3798 ;;                  2    0[COMMON] unsigned int 
  3799 ;; Registers used:
  3800 ;;		wreg, status,2, status,0
  3801 ;; Tracked objects:
  3802 ;;		On entry : 0/0
  3803 ;;		On exit  : 0/0
  3804 ;;		Unchanged: 0/0
  3805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3806 ;;      Params:         4       0       0       0       0
  3807 ;;      Locals:         3       0       0       0       0
  3808 ;;      Temps:          1       0       0       0       0
  3809 ;;      Totals:         8       0       0       0       0
  3810 ;;Total ram usage:        8 bytes
  3811 ;; Hardware stack levels used: 1
  3812 ;; This function calls:
  3813 ;;		Nothing
  3814 ;; This function is called by:
  3815 ;;		_calculovolt
  3816 ;;		_sprintf
  3817 ;; This function uses a non-reentrant model
  3818 ;;
  3819                           
  3820     01F5                     ___lwdiv:	
  3821                           ;psect for function ___lwdiv
  3822                           
  3823     01F5                     l1347:	
  3824                           ;incstack = 0
  3825                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3826                           
  3827     01F5  01F5               	clrf	___lwdiv@quotient
  3828     01F6  01F6               	clrf	___lwdiv@quotient+1
  3829     01F7                     l1349:
  3830     01F7  0870               	movf	___lwdiv@divisor,w
  3831     01F8  0471               	iorwf	___lwdiv@divisor+1,w
  3832     01F9  1903               	btfsc	3,2
  3833     01FA  29FC               	goto	u741
  3834     01FB  29FD               	goto	u740
  3835     01FC                     u741:
  3836     01FC  2A34               	goto	l1369
  3837     01FD                     u740:
  3838     01FD                     l1351:
  3839     01FD  01F7               	clrf	___lwdiv@counter
  3840     01FE  0AF7               	incf	___lwdiv@counter,f
  3841     01FF  2A0B               	goto	l1357
  3842     0200                     l1353:
  3843     0200  3001               	movlw	1
  3844     0201                     u755:
  3845     0201  1003               	clrc
  3846     0202  0DF0               	rlf	___lwdiv@divisor,f
  3847     0203  0DF1               	rlf	___lwdiv@divisor+1,f
  3848     0204  3EFF               	addlw	-1
  3849     0205  1D03               	skipz
  3850     0206  2A01               	goto	u755
  3851     0207                     l1355:
  3852     0207  3001               	movlw	1
  3853     0208  00F4               	movwf	??___lwdiv
  3854     0209  0874               	movf	??___lwdiv,w
  3855     020A  07F7               	addwf	___lwdiv@counter,f
  3856     020B                     l1357:
  3857     020B  1FF1               	btfss	___lwdiv@divisor+1,7
  3858     020C  2A0E               	goto	u761
  3859     020D  2A0F               	goto	u760
  3860     020E                     u761:
  3861     020E  2A00               	goto	l1353
  3862     020F                     u760:
  3863     020F                     l1359:
  3864     020F  3001               	movlw	1
  3865     0210                     u775:
  3866     0210  1003               	clrc
  3867     0211  0DF5               	rlf	___lwdiv@quotient,f
  3868     0212  0DF6               	rlf	___lwdiv@quotient+1,f
  3869     0213  3EFF               	addlw	-1
  3870     0214  1D03               	skipz
  3871     0215  2A10               	goto	u775
  3872     0216  0871               	movf	___lwdiv@divisor+1,w
  3873     0217  0273               	subwf	___lwdiv@dividend+1,w
  3874     0218  1D03               	skipz
  3875     0219  2A1C               	goto	u785
  3876     021A  0870               	movf	___lwdiv@divisor,w
  3877     021B  0272               	subwf	___lwdiv@dividend,w
  3878     021C                     u785:
  3879     021C  1C03               	skipc
  3880     021D  2A1F               	goto	u781
  3881     021E  2A20               	goto	u780
  3882     021F                     u781:
  3883     021F  2A27               	goto	l1365
  3884     0220                     u780:
  3885     0220                     l1361:
  3886     0220  0870               	movf	___lwdiv@divisor,w
  3887     0221  02F2               	subwf	___lwdiv@dividend,f
  3888     0222  0871               	movf	___lwdiv@divisor+1,w
  3889     0223  1C03               	skipc
  3890     0224  03F3               	decf	___lwdiv@dividend+1,f
  3891     0225  02F3               	subwf	___lwdiv@dividend+1,f
  3892     0226                     l1363:
  3893     0226  1475               	bsf	___lwdiv@quotient,0
  3894     0227                     l1365:
  3895     0227  3001               	movlw	1
  3896     0228                     u795:
  3897     0228  1003               	clrc
  3898     0229  0CF1               	rrf	___lwdiv@divisor+1,f
  3899     022A  0CF0               	rrf	___lwdiv@divisor,f
  3900     022B  3EFF               	addlw	-1
  3901     022C  1D03               	skipz
  3902     022D  2A28               	goto	u795
  3903     022E                     l1367:
  3904     022E  3001               	movlw	1
  3905     022F  02F7               	subwf	___lwdiv@counter,f
  3906     0230  1D03               	btfss	3,2
  3907     0231  2A33               	goto	u801
  3908     0232  2A34               	goto	u800
  3909     0233                     u801:
  3910     0233  2A0F               	goto	l1359
  3911     0234                     u800:
  3912     0234                     l1369:
  3913     0234  0876               	movf	___lwdiv@quotient+1,w
  3914     0235  00F1               	movwf	?___lwdiv+1
  3915     0236  0875               	movf	___lwdiv@quotient,w
  3916     0237  00F0               	movwf	?___lwdiv
  3917     0238                     l619:
  3918     0238  0008               	return
  3919     0239                     __end_of___lwdiv:
  3920                           
  3921                           	psect	text18
  3922     032D                     __ptext18:	
  3923 ;; *************** function _Lcd_Init *****************
  3924 ;; Defined at:
  3925 ;;		line 63 in file "lcd.c"
  3926 ;; Parameters:    Size  Location     Type
  3927 ;;		None
  3928 ;; Auto vars:     Size  Location     Type
  3929 ;;		None
  3930 ;; Return value:  Size  Location     Type
  3931 ;;                  1    wreg      void 
  3932 ;; Registers used:
  3933 ;;		wreg, status,2, status,0, pclath, cstack
  3934 ;; Tracked objects:
  3935 ;;		On entry : 0/0
  3936 ;;		On exit  : 0/0
  3937 ;;		Unchanged: 0/0
  3938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3939 ;;      Params:         0       0       0       0       0
  3940 ;;      Locals:         0       0       0       0       0
  3941 ;;      Temps:          2       0       0       0       0
  3942 ;;      Totals:         2       0       0       0       0
  3943 ;;Total ram usage:        2 bytes
  3944 ;; Hardware stack levels used: 1
  3945 ;; Hardware stack levels required when called: 3
  3946 ;; This function calls:
  3947 ;;		_Lcd_Clear
  3948 ;;		_Lcd_Cmd
  3949 ;;		_Lcd_Port
  3950 ;; This function is called by:
  3951 ;;		_main
  3952 ;; This function uses a non-reentrant model
  3953 ;;
  3954                           
  3955     032D                     _Lcd_Init:	
  3956                           ;psect for function _Lcd_Init
  3957                           
  3958     032D                     l1597:	
  3959                           ;incstack = 0
  3960                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  3961                           
  3962                           
  3963                           ;lcd.c: 65:  TRISDbits.TRISD2 = 0;
  3964     032D  1683               	bsf	3,5	;RP0=1, select bank1
  3965     032E  1303               	bcf	3,6	;RP1=0, select bank1
  3966     032F  1108               	bcf	8,2	;volatile
  3967                           
  3968                           ;lcd.c: 66:  TRISDbits.TRISD3 = 0;
  3969     0330  1188               	bcf	8,3	;volatile
  3970                           
  3971                           ;lcd.c: 67:  TRISDbits.TRISD4 = 0;
  3972     0331  1208               	bcf	8,4	;volatile
  3973                           
  3974                           ;lcd.c: 68:  TRISDbits.TRISD5 = 0;
  3975     0332  1288               	bcf	8,5	;volatile
  3976                           
  3977                           ;lcd.c: 69:  TRISDbits.TRISD6 = 0;
  3978     0333  1308               	bcf	8,6	;volatile
  3979                           
  3980                           ;lcd.c: 70:  TRISDbits.TRISD7 = 0;
  3981     0334  1388               	bcf	8,7	;volatile
  3982     0335                     l1599:
  3983                           
  3984                           ;lcd.c: 71:     Lcd_Port(0x00);
  3985     0335  3000               	movlw	0
  3986     0336  120A  118A  20FF  120A  118A  	fcall	_Lcd_Port
  3987     033B                     l1601:
  3988                           
  3989                           ;lcd.c: 72:     _delay((unsigned long)((20)*(4000000/4000.0)));
  3990     033B  301A               	movlw	26
  3991     033C  00F5               	movwf	??_Lcd_Init+1
  3992     033D  30F8               	movlw	248
  3993     033E  00F4               	movwf	??_Lcd_Init
  3994     033F                     u1397:
  3995     033F  0BF4               	decfsz	??_Lcd_Init,f
  3996     0340  2B3F               	goto	u1397
  3997     0341  0BF5               	decfsz	??_Lcd_Init+1,f
  3998     0342  2B3F               	goto	u1397
  3999     0343  0000               	nop
  4000     0344                     l1603:
  4001                           
  4002                           ;lcd.c: 73:     Lcd_Cmd(0x03);
  4003     0344  3003               	movlw	3
  4004     0345  120A  118A  20E5  120A  118A  	fcall	_Lcd_Cmd
  4005                           
  4006                           ;lcd.c: 74:     _delay((unsigned long)((5)*(4000000/4000.0)));
  4007     034A  3007               	movlw	7
  4008     034B  00F5               	movwf	??_Lcd_Init+1
  4009     034C  307D               	movlw	125
  4010     034D  00F4               	movwf	??_Lcd_Init
  4011     034E                     u1407:
  4012     034E  0BF4               	decfsz	??_Lcd_Init,f
  4013     034F  2B4E               	goto	u1407
  4014     0350  0BF5               	decfsz	??_Lcd_Init+1,f
  4015     0351  2B4E               	goto	u1407
  4016     0352                     l1605:
  4017                           
  4018                           ;lcd.c: 75:     Lcd_Cmd(0x03);
  4019     0352  3003               	movlw	3
  4020     0353  120A  118A  20E5  120A  118A  	fcall	_Lcd_Cmd
  4021     0358                     l1607:
  4022                           
  4023                           ;lcd.c: 76:     _delay((unsigned long)((11)*(4000000/4000.0)));
  4024     0358  300F               	movlw	15
  4025     0359  00F5               	movwf	??_Lcd_Init+1
  4026     035A  3047               	movlw	71
  4027     035B  00F4               	movwf	??_Lcd_Init
  4028     035C                     u1417:
  4029     035C  0BF4               	decfsz	??_Lcd_Init,f
  4030     035D  2B5C               	goto	u1417
  4031     035E  0BF5               	decfsz	??_Lcd_Init+1,f
  4032     035F  2B5C               	goto	u1417
  4033     0360  2B61               	nop2
  4034                           
  4035                           ;lcd.c: 77:     Lcd_Cmd(0x03);
  4036     0361  3003               	movlw	3
  4037     0362  120A  118A  20E5  120A  118A  	fcall	_Lcd_Cmd
  4038                           
  4039                           ;lcd.c: 78:     Lcd_Cmd(0x02);
  4040     0367  3002               	movlw	2
  4041     0368  120A  118A  20E5  120A  118A  	fcall	_Lcd_Cmd
  4042                           
  4043                           ;lcd.c: 79:     Lcd_Cmd(0x02);
  4044     036D  3002               	movlw	2
  4045     036E  120A  118A  20E5  120A  118A  	fcall	_Lcd_Cmd
  4046                           
  4047                           ;lcd.c: 80:     Lcd_Cmd(0x08);
  4048     0373  3008               	movlw	8
  4049     0374  120A  118A  20E5  120A  118A  	fcall	_Lcd_Cmd
  4050                           
  4051                           ;lcd.c: 81:     Lcd_Cmd(0x00);
  4052     0379  3000               	movlw	0
  4053     037A  120A  118A  20E5  120A  118A  	fcall	_Lcd_Cmd
  4054                           
  4055                           ;lcd.c: 82:     Lcd_Cmd(0x0C);
  4056     037F  300C               	movlw	12
  4057     0380  120A  118A  20E5  120A  118A  	fcall	_Lcd_Cmd
  4058                           
  4059                           ;lcd.c: 83:     Lcd_Cmd(0x00);
  4060     0385  3000               	movlw	0
  4061     0386  120A  118A  20E5  120A  118A  	fcall	_Lcd_Cmd
  4062                           
  4063                           ;lcd.c: 84:     Lcd_Cmd(0x06);
  4064     038B  3006               	movlw	6
  4065     038C  120A  118A  20E5  120A  118A  	fcall	_Lcd_Cmd
  4066                           
  4067                           ;lcd.c: 85:     Lcd_Clear();
  4068     0391  120A  118A  20C2  120A  118A  	fcall	_Lcd_Clear
  4069     0396                     l182:
  4070     0396  0008               	return
  4071     0397                     __end_of_Lcd_Init:
  4072                           
  4073                           	psect	text19
  4074     00C2                     __ptext19:	
  4075 ;; *************** function _Lcd_Clear *****************
  4076 ;; Defined at:
  4077 ;;		line 20 in file "lcd.c"
  4078 ;; Parameters:    Size  Location     Type
  4079 ;;		None
  4080 ;; Auto vars:     Size  Location     Type
  4081 ;;		None
  4082 ;; Return value:  Size  Location     Type
  4083 ;;                  1    wreg      void 
  4084 ;; Registers used:
  4085 ;;		wreg, status,2, status,0, pclath, cstack
  4086 ;; Tracked objects:
  4087 ;;		On entry : 0/0
  4088 ;;		On exit  : 0/0
  4089 ;;		Unchanged: 0/0
  4090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4091 ;;      Params:         0       0       0       0       0
  4092 ;;      Locals:         0       0       0       0       0
  4093 ;;      Temps:          0       0       0       0       0
  4094 ;;      Totals:         0       0       0       0       0
  4095 ;;Total ram usage:        0 bytes
  4096 ;; Hardware stack levels used: 1
  4097 ;; Hardware stack levels required when called: 2
  4098 ;; This function calls:
  4099 ;;		_Lcd_Cmd
  4100 ;; This function is called by:
  4101 ;;		_main
  4102 ;;		_Lcd_Init
  4103 ;; This function uses a non-reentrant model
  4104 ;;
  4105                           
  4106     00C2                     _Lcd_Clear:	
  4107                           ;psect for function _Lcd_Clear
  4108                           
  4109     00C2                     l1395:	
  4110                           ;incstack = 0
  4111                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  4112                           
  4113                           
  4114                           ;lcd.c: 22:     Lcd_Cmd(0);
  4115     00C2  3000               	movlw	0
  4116     00C3  120A  118A  20E5  120A  118A  	fcall	_Lcd_Cmd
  4117                           
  4118                           ;lcd.c: 23:     Lcd_Cmd(1);
  4119     00C8  3001               	movlw	1
  4120     00C9  120A  118A  20E5  120A  118A  	fcall	_Lcd_Cmd
  4121     00CE                     l169:
  4122     00CE  0008               	return
  4123     00CF                     __end_of_Lcd_Clear:
  4124                           
  4125                           	psect	text20
  4126     00E5                     __ptext20:	
  4127 ;; *************** function _Lcd_Cmd *****************
  4128 ;; Defined at:
  4129 ;;		line 11 in file "lcd.c"
  4130 ;; Parameters:    Size  Location     Type
  4131 ;;  a               1    wreg     unsigned char 
  4132 ;; Auto vars:     Size  Location     Type
  4133 ;;  a               1    3[COMMON] unsigned char 
  4134 ;; Return value:  Size  Location     Type
  4135 ;;                  1    wreg      void 
  4136 ;; Registers used:
  4137 ;;		wreg, status,2, status,0, pclath, cstack
  4138 ;; Tracked objects:
  4139 ;;		On entry : 0/0
  4140 ;;		On exit  : 0/0
  4141 ;;		Unchanged: 0/0
  4142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4143 ;;      Params:         0       0       0       0       0
  4144 ;;      Locals:         1       0       0       0       0
  4145 ;;      Temps:          2       0       0       0       0
  4146 ;;      Totals:         3       0       0       0       0
  4147 ;;Total ram usage:        3 bytes
  4148 ;; Hardware stack levels used: 1
  4149 ;; Hardware stack levels required when called: 1
  4150 ;; This function calls:
  4151 ;;		_Lcd_Port
  4152 ;; This function is called by:
  4153 ;;		_Lcd_Clear
  4154 ;;		_Lcd_Set_Cursor
  4155 ;;		_Lcd_Init
  4156 ;;		_Lcd_Shift_Right
  4157 ;;		_Lcd_Shift_Left
  4158 ;;		_Lcd_Blink
  4159 ;;		_Lcd_NoBlink
  4160 ;; This function uses a non-reentrant model
  4161 ;;
  4162                           
  4163     00E5                     _Lcd_Cmd:	
  4164                           ;psect for function _Lcd_Cmd
  4165                           
  4166                           
  4167                           ;incstack = 0
  4168                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  4169                           ;Lcd_Cmd@a stored from wreg
  4170     00E5  00F3               	movwf	Lcd_Cmd@a
  4171     00E6                     l1317:
  4172                           
  4173                           ;lcd.c: 11: void Lcd_Cmd(char a);lcd.c: 12: {;lcd.c: 13:     PORTDbits.RD2 = 0;
  4174     00E6  1283               	bcf	3,5	;RP0=0, select bank0
  4175     00E7  1303               	bcf	3,6	;RP1=0, select bank0
  4176     00E8  1108               	bcf	8,2	;volatile
  4177     00E9                     l1319:
  4178                           
  4179                           ;lcd.c: 14:     Lcd_Port(a);
  4180     00E9  0873               	movf	Lcd_Cmd@a,w
  4181     00EA  120A  118A  20FF  120A  118A  	fcall	_Lcd_Port
  4182     00EF                     l1321:
  4183                           
  4184                           ;lcd.c: 15:     PORTDbits.RD3 = 1;
  4185     00EF  1283               	bcf	3,5	;RP0=0, select bank0
  4186     00F0  1303               	bcf	3,6	;RP1=0, select bank0
  4187     00F1  1588               	bsf	8,3	;volatile
  4188     00F2                     l1323:
  4189                           
  4190                           ;lcd.c: 16:     _delay((unsigned long)((4)*(4000000/4000.0)));
  4191     00F2  3006               	movlw	6
  4192     00F3  00F2               	movwf	??_Lcd_Cmd+1
  4193     00F4  3030               	movlw	48
  4194     00F5  00F1               	movwf	??_Lcd_Cmd
  4195     00F6                     u1427:
  4196     00F6  0BF1               	decfsz	??_Lcd_Cmd,f
  4197     00F7  28F6               	goto	u1427
  4198     00F8  0BF2               	decfsz	??_Lcd_Cmd+1,f
  4199     00F9  28F6               	goto	u1427
  4200     00FA  0000               	nop
  4201     00FB                     l1325:
  4202                           
  4203                           ;lcd.c: 17:     PORTDbits.RD3 = 0;
  4204     00FB  1283               	bcf	3,5	;RP0=0, select bank0
  4205     00FC  1303               	bcf	3,6	;RP1=0, select bank0
  4206     00FD  1188               	bcf	8,3	;volatile
  4207     00FE                     l166:
  4208     00FE  0008               	return
  4209     00FF                     __end_of_Lcd_Cmd:
  4210                           
  4211                           	psect	text21
  4212     00FF                     __ptext21:	
  4213 ;; *************** function _Lcd_Port *****************
  4214 ;; Defined at:
  4215 ;;		line 3 in file "lcd.c"
  4216 ;; Parameters:    Size  Location     Type
  4217 ;;  a               1    wreg     unsigned char 
  4218 ;; Auto vars:     Size  Location     Type
  4219 ;;  a               1    0[COMMON] unsigned char 
  4220 ;; Return value:  Size  Location     Type
  4221 ;;                  1    wreg      void 
  4222 ;; Registers used:
  4223 ;;		wreg
  4224 ;; Tracked objects:
  4225 ;;		On entry : 0/0
  4226 ;;		On exit  : 0/0
  4227 ;;		Unchanged: 0/0
  4228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4229 ;;      Params:         0       0       0       0       0
  4230 ;;      Locals:         1       0       0       0       0
  4231 ;;      Temps:          0       0       0       0       0
  4232 ;;      Totals:         1       0       0       0       0
  4233 ;;Total ram usage:        1 bytes
  4234 ;; Hardware stack levels used: 1
  4235 ;; This function calls:
  4236 ;;		Nothing
  4237 ;; This function is called by:
  4238 ;;		_Lcd_Cmd
  4239 ;;		_Lcd_Init
  4240 ;;		_Lcd_Write_Char
  4241 ;; This function uses a non-reentrant model
  4242 ;;
  4243                           
  4244     00FF                     _Lcd_Port:	
  4245                           ;psect for function _Lcd_Port
  4246                           
  4247                           
  4248                           ;incstack = 0
  4249                           ; Regs used in _Lcd_Port: [wreg]
  4250                           ;Lcd_Port@a stored from wreg
  4251     00FF  00F0               	movwf	Lcd_Port@a
  4252     0100                     l1307:
  4253                           
  4254                           ;lcd.c: 3: void Lcd_Port(char a);lcd.c: 4: {;lcd.c: 5:     (a & 1) ? (PORTDbits.RD4 = 1)
      +                           : (PORTDbits.RD4 = 0);
  4255     0100  1C70               	btfss	Lcd_Port@a,0
  4256     0101  2903               	goto	u691
  4257     0102  2904               	goto	u690
  4258     0103                     u691:
  4259     0103  2908               	goto	l148
  4260     0104                     u690:
  4261     0104                     l1309:
  4262     0104  1283               	bcf	3,5	;RP0=0, select bank0
  4263     0105  1303               	bcf	3,6	;RP1=0, select bank0
  4264     0106  1608               	bsf	8,4	;volatile
  4265     0107  290B               	goto	l150
  4266     0108                     l148:
  4267     0108  1283               	bcf	3,5	;RP0=0, select bank0
  4268     0109  1303               	bcf	3,6	;RP1=0, select bank0
  4269     010A  1208               	bcf	8,4	;volatile
  4270     010B                     l150:
  4271                           
  4272                           ;lcd.c: 6:     (a & 2) ? (PORTDbits.RD5 = 1) : (PORTDbits.RD5 = 0);
  4273     010B  1CF0               	btfss	Lcd_Port@a,1
  4274     010C  290E               	goto	u701
  4275     010D  290F               	goto	u700
  4276     010E                     u701:
  4277     010E  2911               	goto	l152
  4278     010F                     u700:
  4279     010F                     l1311:
  4280     010F  1688               	bsf	8,5	;volatile
  4281     0110  2912               	goto	l154
  4282     0111                     l152:
  4283     0111  1288               	bcf	8,5	;volatile
  4284     0112                     l154:
  4285                           
  4286                           ;lcd.c: 7:     (a & 4) ? (PORTDbits.RD6 = 1) : (PORTDbits.RD6 = 0);
  4287     0112  1D70               	btfss	Lcd_Port@a,2
  4288     0113  2915               	goto	u711
  4289     0114  2916               	goto	u710
  4290     0115                     u711:
  4291     0115  2918               	goto	l156
  4292     0116                     u710:
  4293     0116                     l1313:
  4294     0116  1708               	bsf	8,6	;volatile
  4295     0117  2919               	goto	l158
  4296     0118                     l156:
  4297     0118  1308               	bcf	8,6	;volatile
  4298     0119                     l158:
  4299                           
  4300                           ;lcd.c: 8:     (a & 8) ? (PORTDbits.RD7 = 1) : (PORTDbits.RD7 = 0);
  4301     0119  1DF0               	btfss	Lcd_Port@a,3
  4302     011A  291C               	goto	u721
  4303     011B  291D               	goto	u720
  4304     011C                     u721:
  4305     011C  291F               	goto	l160
  4306     011D                     u720:
  4307     011D                     l1315:
  4308     011D  1788               	bsf	8,7	;volatile
  4309     011E  2920               	goto	l163
  4310     011F                     l160:
  4311     011F  1388               	bcf	8,7	;volatile
  4312     0120                     l163:
  4313     0120  0008               	return
  4314     0121                     __end_of_Lcd_Port:
  4315     007E                     btemp	set	126	;btemp
  4316     007E                     wtemp0	set	126
  4317                           
  4318                           	psect	idloc
  4319                           
  4320                           ;Config register IDLOC0 @ 0x2000
  4321                           ;	unspecified, using default values
  4322     2000                     	org	8192
  4323     2000  3FFF               	dw	16383
  4324                           
  4325                           ;Config register IDLOC1 @ 0x2001
  4326                           ;	unspecified, using default values
  4327     2001                     	org	8193
  4328     2001  3FFF               	dw	16383
  4329                           
  4330                           ;Config register IDLOC2 @ 0x2002
  4331                           ;	unspecified, using default values
  4332     2002                     	org	8194
  4333     2002  3FFF               	dw	16383
  4334                           
  4335                           ;Config register IDLOC3 @ 0x2003
  4336                           ;	unspecified, using default values
  4337     2003                     	org	8195
  4338     2003  3FFF               	dw	16383
  4339                           
  4340                           	psect	config
  4341                           
  4342                           ;Config register CONFIG1 @ 0x2007
  4343                           ;	Oscillator Selection bits
  4344                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  4345                           ;	Watchdog Timer Enable bit
  4346                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  4347                           ;	Power-up Timer Enable bit
  4348                           ;	PWRTE = OFF, PWRT disabled
  4349                           ;	RE3/MCLR pin function select bit
  4350                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  4351                           ;	Code Protection bit
  4352                           ;	CP = OFF, Program memory code protection is disabled
  4353                           ;	Data Code Protection bit
  4354                           ;	CPD = OFF, Data memory code protection is disabled
  4355                           ;	Brown Out Reset Selection bits
  4356                           ;	BOREN = OFF, BOR disabled
  4357                           ;	Internal External Switchover bit
  4358                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  4359                           ;	Fail-Safe Clock Monitor Enabled bit
  4360                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  4361                           ;	Low Voltage Programming Enable bit
  4362                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  4363                           ;	In-Circuit Debugger Mode bit
  4364                           ;	DEBUG = 0x1, unprogramme  4365     2007                     	org	8199
  4366     2007  20D4               	dw	8404
  4367                           
  4368                           ;Config register CONFIG2 @ 0x2008
  4369                           ;	Brown-out Reset Selection bit
  4370                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  4371                           ;	Flash Program Memory Self Write Enable bits
  4372                           ;	WRT = OFF, Write protection off
  4373     2008                     	org	8200
  4374     2008  3FFF               	dw	16383

Data Sizes:
    Strings     22
    Constant    10
    Data        0
    BSS         45
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     54      79
    BANK1            80      0      20
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_8(CODE[3]), STR_7(CODE[3]), STR_5(CODE[3]), STR_4(CODE[3]), 
		 -> STR_2(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 20
		 -> buffer(BANK1[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_6(CODE[2]), STR_3(CODE[2]), buffer(BANK1[20]), STR_1(CODE[17]), 


Critical Paths under _main in COMMON

    _sprintf->___lwmod
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _setup->_spiInit
    _map->___aldiv
    ___aldiv->___lmul
    _calculovolt->___lwmod
    ___lwmod->___lwdiv
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_map
    _valorLCD->_sprintf
    _map->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   10252
                                             50 BANK0      4     4      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                        _calculovolt
                                _map
                              _setup
                        _setupINTOSC
                            _spiRead
                           _spiWrite
                           _valorLCD
 ---------------------------------------------------------------------------------
 (1) _valorLCD                                             0     0      0    4299
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    18      3    2165
                                              0 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     7     5      2     876
                                              5 COMMON     7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       6     5      1    1258
                                              4 COMMON     6     5      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _spiWrite                                             1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (2) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupINTOSC                                          1     1      0     176
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _setup                                                2     2      0     360
                                              4 COMMON     2     2      0
                            _spiInit
 ---------------------------------------------------------------------------------
 (2) _spiInit                                              4     1      3     360
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _map                                                 36    16     20    1610
                                             14 BANK0     36    16     20
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              13     5      8     244
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     452
                                             13 COMMON     1     1      0
                                              0 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _calculovolt                                          0     0      0    1233
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     615
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     618
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     308
                                              4 COMMON     2     2      0
                          _Lcd_Clear
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Clear
     _Lcd_Cmd
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _calculovolt
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
   _map
     ___aldiv
       ___lmul (ARG)
     ___lmul
   _setup
     _spiInit
   _setupINTOSC
   _spiRead
     _spiReceiveWait
   _spiWrite
   _valorLCD
     _Lcd_Set_Cursor
     _Lcd_Write_String
     _sprintf
       ___lwdiv
       ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      71       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     36      4F       5       98.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      14       7       25.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      71      12        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Fri Feb 03 01:23:15 2023

                       pc 0002               _SSPSTATbits 0094                        l91 02CD  
                      l85 0145                        l96 02D9                        l88 0625  
                      l97 02E5                        _V1 006E                        l98 02F1  
                      _V2 006D                        l99 02FD                        _d1 0065  
                      _d2 0061                        _u1 0067                        _u2 0063  
                      fsr 0004                       l100 0309                       l101 0315  
                     l102 0320                       l120 00DF                       l104 032C  
                     l121 00E4                       l130 00A9                       l124 00AA  
                     l150 010B                       l206 0568                       l127 00B0  
                     l160 011F                       l152 0111                       l154 0112  
                     l138 00C1                       l163 0120                       l156 0118  
                     l148 0108                       l412 0438                       l158 0119  
                     l166 00FE                       l182 0396                       l422 04C0  
                     l175 0423                       l191 01F4                       l343 06E6  
                     l169 00CE                       l361 027E                       l185 0178  
                     l179 0423                       l619 0238                       l629 01B2  
                     u700 010F                       u701 010E                       u710 0116  
                     u711 0115                       u720 011D                       u800 0234  
                     u721 011C                       u801 0233                       u810 017F  
                     u811 017E                       u740 01FD                       u741 01FC  
                     u830 0191                       u910 03E3                       u831 0190  
                     u911 03E2                       u735 0153                       u760 020F  
                     u840 019B                       u761 020E                       u841 019A  
                     u825 0183                       u905 03C6                       u690 0104  
                     u930 0406                       u691 0103                       u755 0201  
                     u931 0405                       u780 0220                       u860 01AE  
                     u781 021F                       u861 01AD                       u845 0197  
                     u925 03E9                       u870 039D                       u950 01C0  
                     u775 0210                       u855 01A2                       u871 039C  
                     u960 01E2                       u785 021C                       u945 040C  
                     u890 03C0                       u970 01F4                       u795 0228  
                     u891 03BF                       u971 01F3                       u980 00D7  
                     u981 00D6                       u885 03A3                       u990 0632  
                     u991 0631                       _map 04C1                       fsr0 0004  
                     indf 0000                      l1311 010F                      l1313 0116  
                    l1321 00EF                      l1401 03AA                      l1315 011D  
                    l1307 0100                      l1323 00F2                      l1411 03CD  
                    l1403 03AD                      l1331 0150                      l1309 0104  
                    l1325 00FB                      l1317 00E6                      l1421 03F0  
                    l1413 03D0                      l1405 03B3                      l1341 016E  
                    l1333 015E                      l1319 00E9                      l1351 01FD  
                    l1511 0241                      l1431 0413                      l1423 03F3  
                    l1415 03D6                      l1407 03BA                      l1343 0171  
                    l1335 0161                      l1327 0147                      l1601 033B  
                    l1361 0220                      l1353 0200                      l1513 0245  
                    l1433 0416                      l1425 03F9                      l1409 03C0  
                    l1417 03DD                      l1345 0175                      l1337 0165  
                    l1329 014D                      l1441 01D2                      l1603 0344  
                    l1363 0226                      l1355 0207                      l1347 01F5  
                    l1531 0447                      l1523 0424                      l1515 025C  
                    l1451 00DB                      l1507 00AA                      l1611 00B9  
                    l1435 041C                      l1419 03E3                      l1427 0400  
                    l1339 0168                      l1443 01D8                      l1605 0352  
                    l1365 0227                      l1357 020B                      l1349 01F7  
                    l1381 018D                      l1373 0179                      l1621 027F  
                    l1541 046B                      l1533 044B                      l1525 0427  
                    l1517 0265                      l1509 0239                      l1453 00DE  
                    l1445 00D0                      l1613 00BE                      l1429 0406  
                    l1437 01B3                      l1461 0637                      l1607 0358  
                    l1367 022E                      l1359 020F                      l1383 0191  
                    l1375 017F                      l1391 01AE                      l1551 0499  
                    l1543 046F                      l1535 0453                      l1527 042B  
                    l1519 0276                      l1447 00D7                      l1439 01B6  
                    l1471 065D                      l1463 063C                      l1455 0629  
                    l1631 0599                      l1623 0569                      l1369 0234  
                    l1385 019B                      l1377 0182                      l1553 04A2  
                    l1545 0478                      l1537 045B                      l1529 043C  
                    l1617 04C1                      l1449 00D9                      l1609 00A5  
                    l1481 066B                      l1473 0665                      l1721 0655  
                    l1465 063E                      l1457 062C                      l1641 05E8  
                    l1633 05B8                      l1625 0571                      l1395 00C2  
                    l1387 01A1                      l1379 0189                      l1547 048A  
                    l1539 045E                      l1555 04A8                      l1571 02F7  
                    l1563 02CF                      l1491 06C0                      l1475 0669  
                    l1459 0632                      l1643 05F0                      l1635 05C0  
                    l1627 057F                      l1651 06F7                      l1389 01A8  
                    l1557 04AD                      l1549 0498                      l1581 0329  
                    l1573 0303                      l1565 02D5                      l1397 0398  
                    l1493 06C5                      l1485 0687                      l1469 0643  
                    l1645 05FE                      l1637 05CE                      l1629 0590  
                    l1661 0719                      l1653 06FE                      l1559 04B8  
                    l1591 0132                      l1583 0121                      l1575 030F  
                    l1567 02DF                      l1399 039D                      l1495 06C9  
                    l1487 0691                      l1647 0607                      l1639 05D7  
                    l1671 076C                      l1663 071C                      l1655 0703  
                    l1593 0133                      l1585 0128                      l1577 031A  
                    l1569 02EB                      l1489 0694                      l1497 06D2  
                    l1681 078A                      l1673 0776                      l1665 0724  
                    l1657 070B                      l1649 06E7                      l1595 013C  
                    l1587 0129                      l1579 0325                      l1499 06E2  
                    l1691 07E4                      l1683 0792                      l1675 077E  
                    l1667 072C                      l1659 0714                      l1597 032D  
                    l1589 0131                      l1685 079A                      l1677 0781  
                    l1669 0734                      l1599 0335                      l1687 07D2  
                    l1679 0782                      l1689 07DC                      ?_map 002E  
                    STR_1 001D                      STR_2 002E                      STR_3 0031  
                    STR_4 002E                      STR_5 002E                      STR_6 0031  
                    STR_7 002E                      STR_8 002E                      u1000 0686  
                    u1001 0685                      u1010 0691                      u1011 0690  
                    u1100 042B                      u1020 06D2                      u1101 042A  
                    u1021 06D1                      u1005 0682                      u1110 043C  
                    u1030 06E2                      u1111 043B                      u1031 06E1  
                    u1120 045B                      u1200 02D5                      u1040 00B0  
                    u1121 045A                      u1201 02D4                      u1041 00AF  
                    u1050 0245                      u1210 02DF                      u1051 0244  
                    u1211 02DE                      u1140 046F                      u1220 02EB  
                    u1141 046E                      u1061 024E                      u1301 051A  
                    u1221 02EA                      u1062 0255                      u1302 051B  
                    u1230 02F7                      u1135 0460                      u1063 025C  
                    u1303 0520                      u1231 02F6                      u1160 048A  
                    u1304 0521                      u1240 0303                      u1161 0489  
                    u1305 0526                      u1241 0302                      u1090 0276  
                    u1306 0527                      u1250 030F                      u1155 0471  
                    u1091 0275                      u1075 025E                      u1251 030E  
                    u1180 04A8                      u1260 031A                      u1181 04A7  
                    u1165 0486                      u1085 0266                      u1261 0319  
                    u1317 06FB                      u1190 04AD                      u1270 0325  
                    u1407 034E                      u1191 04AC                      u1175 049A  
                    u1271 0324                      u1327 0720                      u1417 035C  
                    u1281 04D2                      u1337 077A                      u1282 04D3  
                    u1427 00F6                      u1291 04F6                      u1283 04D8  
                    u1347 0786                      u1292 04F7                      u1284 04D9  
                    u1293 04FC                      u1285 04DE                      u1357 07E0  
                    u1294 04FD                      u1286 04DF                      u1295 0502  
                    u1367 0163                      u1296 0503                      u1377 0173  
                    u1387 0140                      u1397 033F         ?_Lcd_Write_String 0075  
                    _cont 005F                      _main 06E7                      map@x 002E  
                    btemp 007E                      start 0000        ??_Lcd_Write_String 0077  
         __end_of_Lcd_Cmd 00FF                     ??_map 0042           __end_of___aldiv 04C1  
                   ?_main 0070           __end_of___lwdiv 0239           __end_of___lwmod 01B3  
                   _PORTA 0005                     _PORTB 0006                     _PORTD 0008  
                   _PORTE 0009                     _TRISA 0085                     _TRISB 0086  
                   _TRISD 0088                     _VOLT1 006B                     _VOLT2 0069  
     ___lmul@multiplicand 0074           __end_of_dpowers 001D                     _setup 0121  
                   pclath 000A           __end_of_spiInit 00E5           __end_of_spiRead 00C2  
                   status 0003                     wtemp0 007E           __end_of_sprintf 06E7  
        __end_of_Lcd_Init 0397          __end_of_Lcd_Port 0121           __initialization 07EB  
            __end_of_main 07EB                    ??_main 0052                    ?_setup 0070  
                  _ANSELH 0189                 ??_Lcd_Cmd 0071                    _TRISC3 043B  
                  _TRISC5 043D                    _SSPCON 0014                    _SSPBUF 0013  
                  ___lmul 0239                 ??___aldiv 007D                 ??___lwdiv 0074  
               ??___lwmod 007C                    _buffer 00A0              ?_setupINTOSC 0070  
        __end_of_valorLCD 0626          __end_of_spiWrite 00AA                 ??_spiInit 0073  
               ??_spiRead 0070                 ??_sprintf 0023           Lcd_Set_Cursor@a 0076  
         Lcd_Set_Cursor@b 0074           Lcd_Set_Cursor@y 0078           Lcd_Set_Cursor@z 0077  
 __end_of__initialization 07FC         __end_of_Lcd_Clear 00CF            __pcstackCOMMON 0070  
           __end_of_setup 0146            _Lcd_Set_Cursor 0397                 ?_Lcd_Init 0070  
               ?_Lcd_Port 0070                   ??_setup 0074                __pbssBANK0 0056  
              __pbssBANK1 00A0                __pmaintext 06E7                   ?___lmul 0070  
          ___lmul@product 0079    __end_of_Lcd_Set_Cursor 0424                ??_Lcd_Init 0074  
              ??_Lcd_Port 0070                   _SSPSTAT 0094                __stringtab 0003  
          _Lcd_Write_Char 0146                   _Lcd_Cmd 00E5                 ?_valorLCD 0070  
               ?_spiWrite 0070                   ___aldiv 0424                   ___lwdiv 01F5  
                 ___lwmod 0179                 _ANSELbits 0188           ?_Lcd_Set_Cursor 0074  
           ??_calculovolt 007E                   __ptext1 0569                   __ptext2 0626  
                 __ptext3 01B3                   __ptext4 0146                   __ptext5 0397  
                 __ptext6 00A4                   __ptext7 00B9                   __ptext8 00AA  
                 __ptext9 02CE                   _dpowers 0013          ___aldiv@dividend 0024  
                 _spiInit 00CF                   _spiRead 00B9                   map@eMax 0036  
                 map@eMin 0032                   map@sMax 003E                   map@sMin 003A  
                 _sprintf 0626                   clrloop0 00B2    __end_of_Lcd_Write_Char 0179  
    end_of_initialization 07FC                ??_valorLCD 007E          ___aldiv@quotient 002A  
              ??_spiWrite 0070                 Lcd_Port@a 0070                 _PORTAbits 0005  
               _PORTCbits 0007                 _PORTDbits 0008                 _TRISAbits 0085  
               _TRISCbits 0087                 _TRISDbits 0088       __end_of_calculovolt 02CE  
             spiWrite@dat 0070           ?_Lcd_Write_Char 0070         Lcd_Write_String@a 0075  
       Lcd_Write_String@i 007A                 _Lcd_Clear 00C2            _spiReceiveWait 00AA  
          __end_of___lmul 027F          _Lcd_Write_String 01B3       start_initialization 07EB  
             __end_of_map 0569    __end_of_spiReceiveWait 00B1                ?_Lcd_Clear 0070  
                ??___lmul 0078           Lcd_Write_Char@a 0074           Lcd_Write_Char@y 0073  
             _calculovolt 027F                 ___latbits 0002             __pcstackBANK0 0020  
         setupINTOSC@IRCF 0070                  ?_Lcd_Cmd 0070               sprintf@flag 0026  
             sprintf@prec 002A          ___lwdiv@dividend 0072           ?_spiReceiveWait 0070  
        ??_Lcd_Set_Cursor 0075                  ?___aldiv 0020                  ?___lwdiv 0070  
                ?___lwmod 0078                 __pstrings 0003                  ?_spiInit 0070  
                ?_spiRead 0070          ___lwdiv@quotient 0075                  ?_sprintf 0020  
         ___aldiv@divisor 0020      spiInit@sTransmitEdge 0072           ___aldiv@counter 0028  
               clear_ram0 00B1                  _PIE1bits 008C        spiInit@sDataSample 0070  
                Lcd_Cmd@a 0073                  _PIR1bits 000C               ??_Lcd_Clear 0074  
              _ADCON0bits 001F               __stringbase 0012                _ADCON1bits 009F  
           ??_setupINTOSC 0070          ??_Lcd_Write_Char 0071                  _Lcd_Init 032D  
                _Lcd_Port 00FF         ___lmul@multiplier 0070  __end_of_Lcd_Write_String 01F5  
      __end_of__stringtab 0013                sprintf@val 0028           ___lwdiv@divisor 0070  
         ___lwdiv@counter 0077                  __ptext10 0121                  __ptext11 00CF  
                __ptext20 00E5                  __ptext12 04C1                  __ptext21 00FF  
                __ptext13 0239                  __ptext14 0424                  __ptext15 027F  
                __ptext16 0179                  __ptext17 01F5                  __ptext18 032D  
                __ptext19 00C2       __end_of_setupINTOSC 032D                  _contador 0056  
                _valorLCD 0569                  _spiWrite 00A4              spiInit@sType 0073  
       spiInit@sClockIdle 0071                  _voltaje1 005C                  _voltaje2 0059  
            ?_calculovolt 0070                _INTCONbits 000B        Lcd_Write_Char@temp 0072  
               sprintf@ap 0027                 sprintf@sp 002B          ___lwmod@dividend 007A  
        ??_spiReceiveWait 0070                 stringcode 000D                _OSCCONbits 008F  
      Lcd_Set_Cursor@temp 0079               _setupINTOSC 02CE                  sprintf@c 002C  
                sprintf@f 0020           ___lwmod@divisor 0078           ___lwmod@counter 007D  
                stringdir 000D                  stringtab 0003              ___aldiv@sign 0029  
